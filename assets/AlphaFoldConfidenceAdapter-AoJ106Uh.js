var u=Object.defineProperty;var m=(a,e,t)=>e in a?u(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var i=(a,e,t)=>m(a,typeof e!="symbol"?e+"":e,t);import{B as l}from"./index-BU4rHWQb.js";import{ad as h,u as n}from"./index-DRDIumvF.js";import{r as x}from"./rxjs-BV3FlQAo.js";class g extends l.BaseFeatureDataAdapter{constructor(){super(...arguments);i(this,"feats")}async loadDataP(){const t=JSON.parse(await h.openLocation(this.getConf("location")).readFile("utf8"));return t.residueNumber.map((s,r)=>({uniqueId:`feat-${r}`,start:s,end:s+1,score:t.confidenceScore[r]}))}async loadData(t={}){return this.feats=this.feats??this.loadDataP().catch(s=>{throw this.feats=void 0,s}),this.feats}async getRefNames(t={}){return[]}getFeatures(t,s={}){return x.ObservableCreate(async r=>{const{start:c,end:f,refName:p}=t,d=await this.loadData();for(const o of d)n.doesIntersect2(o.start,o.end,c,f)&&r.next(new n.SimpleFeature({...o,refName:p}));r.complete()})}}i(g,"capabilities",["getFeatures","getRefNames"]);export{g as default};
//# sourceMappingURL=AlphaFoldConfidenceAdapter-AoJ106Uh.js.map
