{"version":3,"mappings":"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","names":["AltFormatter","value","ref","show","setShow","useState","getMinimalDesc","_jsxs","_jsx","Formatter","copied","setCopied","display","_Fragment","copy","val","Checkbox2","checked","disabled","label","onChange","FormControlLabel","Checkbox","Typography","toP","n","VariantGenotypeFrequencyTable","rows","useCounts","setUseCounts","summary","row","alleleCounts","alleles","allele","key","gt","gridRows","widths","e","measureGridWidth","r","_","DataGridFlexContainer","DataGrid","SampleFilters","columns","filter","setFilter","field","TextField","event","areSetsEqual","set1","set2","item","VariantSampleGrid","props","_a","feature","descriptions","showOnlyGenotypeColumns","setShowOnlyGenotypeColumns","showFilters","setShowFilters","samples","ALT","REF","preFilteredRows","_b","makeSimpleAltString","error","filters","formatField","formatValue","currFilter","keys","index","s1","s2","BaseCard","ErrorBoundary","ErrorMessage","f","variantFieldDescriptions","LaunchBreakendPanel","lazy","__vitePreload","VariantConsequenceDataGrid","AnnPanel","_c","_d","_e","annDesc","annFields","ann","CsqPanel","csqDescription","csqFields","csq","LaunchBreakendWidgetArea","model","featureData","feat","type","alt","parseBreakend","FeatDefined","observer","rest","Paper","FeatureDetails","Suspense","VariantFeatureWidget"],"ignoreList":[0,1,2,3,4,5,6,7,8],"sources":["../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/AltFormatter.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/Formatter.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/Checkbox2.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/VariantGenotypeFrequencyTable.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/VariantSampleFilters.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/util.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/VariantSampleGrid.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/variantFieldDescriptions.js","../../node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantFeatureWidget.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { getMinimalDesc } from '../VcfFeature/util';\nexport default function AltFormatter({ value, ref, }) {\n    const [show, setShow] = useState(false);\n    const alt = getMinimalDesc(ref, value);\n    return alt !== value ? (_jsxs(\"div\", { children: [_jsx(\"button\", { onClick: () => {\n                    setShow(!show);\n                }, children: show ? 'Show simplified ALT' : 'Show raw ALT' }), ' ', show ? value : getMinimalDesc(ref, value)] })) : (value);\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport copy from 'copy-to-clipboard';\nexport default function Formatter({ value }) {\n    const [show, setShow] = useState(false);\n    const [copied, setCopied] = useState(false);\n    const display = String(value);\n    return display.length > 100 ? (_jsxs(_Fragment, { children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                    copy(display);\n                    setCopied(true);\n                    setTimeout(() => {\n                        setCopied(false);\n                    }, 700);\n                }, children: copied ? 'Copied to clipboard' : 'Copy' }), _jsx(\"button\", { type: \"button\", onClick: () => {\n                    setShow(val => !val);\n                }, children: show ? 'Show less' : 'Show more' }), _jsx(\"div\", { children: show ? display : `${display.slice(0, 100)}...` })] })) : (_jsx(\"div\", { children: display }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material';\nexport default function Checkbox2({ checked, disabled, label, onChange, }) {\n    return (_jsx(FormControlLabel, { disabled: disabled, control: _jsx(Checkbox, { checked: checked, onChange: onChange }), label: _jsx(Typography, { variant: \"body2\", children: label }) }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer';\nimport { measureGridWidth } from '@jbrowse/core/util';\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nfunction toP(n) {\n    return n.toPrecision(3);\n}\nexport default function VariantGenotypeFrequencyTable({ rows, }) {\n    const [useCounts, setUseCounts] = useState(false);\n    const summary = {};\n    if (!useCounts) {\n        for (const row of rows) {\n            const gt = row.GT;\n            if (!summary[gt]) {\n                summary[gt] = {\n                    count: 0,\n                    GT: row.GT,\n                    genotype: row.genotype,\n                };\n            }\n            summary[gt].count++;\n        }\n    }\n    else {\n        for (const row of rows) {\n            const alleleCounts = {};\n            const alleles = row.GT.split(/[/|]/);\n            for (const allele of alleles) {\n                alleleCounts[allele] = (alleleCounts[allele] || 0) + 1;\n            }\n            const key = Object.entries(alleleCounts)\n                .map(([key, val]) => `${key}:${val}`)\n                .join(';');\n            if (!summary[key]) {\n                summary[key] = {\n                    count: 0,\n                    GT: key,\n                    genotype: row.genotype,\n                };\n            }\n            summary[key].count++;\n        }\n    }\n    const gridRows = Object.entries(summary).map(([key, val]) => ({\n        id: key,\n        ...val,\n        count: `${val.count} / ${rows.length}`,\n        frequency: `${toP((val.count / rows.length) * 100)}%`,\n    }));\n    const keys = gridRows[0] ? Object.keys(gridRows[0]) : [];\n    const widths = keys.map(e => measureGridWidth(gridRows.map(r => `${r[e]}`)));\n    return (_jsxs(\"div\", { children: [_jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: useCounts }), label: _jsx(Typography, { variant: \"body2\", children: \"Use allele counts instead of exact GT\" }), onChange: (_, checked) => {\n                    setUseCounts(checked);\n                } }), _jsx(DataGridFlexContainer, { children: _jsx(DataGrid, { rows: gridRows, hideFooter: true, rowHeight: 25, columnHeaderHeight: 35, columns: [\n                        {\n                            field: 'GT',\n                            width: widths[0],\n                        },\n                        {\n                            field: 'count',\n                            width: widths[1],\n                        },\n                        {\n                            field: 'frequency',\n                            width: widths[2],\n                        },\n                        {\n                            field: 'genotype',\n                            width: widths[3],\n                        },\n                    ] }) })] }));\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TextField, Typography } from '@mui/material';\nexport default function SampleFilters({ columns, filter, setFilter, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(Typography, { children: \"These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\\\d* will find any non-zero allele e.g. 0|2 or 2/33\" }), columns.map(({ field }) => (_jsx(TextField, { placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => {\n                    setFilter({ ...filter, [field]: event.target.value });\n                } }, `filter-${field}`)))] }));\n}\n","export function areSetsEqual(set1, set2) {\n    if (set1.size !== set2.size) {\n        return false;\n    }\n    for (const item of set1) {\n        if (!set2.has(item)) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer';\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary';\nimport { measureGridWidth } from '@jbrowse/core/util';\nimport { Typography } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Checkbox2 from '../Checkbox2';\nimport VariantGenotypeFrequencyTable from './VariantGenotypeFrequencyTable';\nimport SampleFilters from './VariantSampleFilters';\nimport { areSetsEqual } from './util';\nimport { makeSimpleAltString } from '../../VcfFeature/util';\nexport default function VariantSampleGrid(props) {\n    var _a;\n    const { feature, descriptions = {} } = props;\n    const [filter, setFilter] = useState({});\n    const [showOnlyGenotypeColumns, setShowOnlyGenotypeColumns] = useState(true);\n    const [showFilters, setShowFilters] = useState(false);\n    const samples = (feature.samples || {});\n    const ALT = feature.ALT;\n    const REF = feature.REF;\n    const preFilteredRows = Object.entries(samples).map(([key, val]) => {\n        var _a, _b;\n        return [\n            key,\n            {\n                ...val,\n                GT: `${(_a = val.GT) === null || _a === void 0 ? void 0 : _a[0]}`,\n                genotype: makeSimpleAltString(`${(_b = val.GT) === null || _b === void 0 ? void 0 : _b[0]}`, REF, ALT),\n            },\n        ];\n    });\n    let error;\n    let rows = [];\n    const filters = Object.keys(filter);\n    try {\n        rows = preFilteredRows\n            .map(([key, val]) => {\n            return {\n                ...Object.fromEntries(Object.entries(val).map(([formatField, formatValue]) => [\n                    formatField,\n                    formatValue,\n                ])),\n                sample: key,\n                id: key,\n            };\n        })\n            .filter(row => filters.length\n            ? filters.every(key => {\n                const currFilter = filter[key];\n                return currFilter\n                    ? new RegExp(currFilter, 'i').exec(row[key])\n                    : true;\n            })\n            : true);\n    }\n    catch (e) {\n        console.error(e);\n        error = e;\n    }\n    const keys = ['sample', ...Object.keys(((_a = preFilteredRows[0]) === null || _a === void 0 ? void 0 : _a[1]) || {})];\n    const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])));\n    const columns = keys.map((field, index) => {\n        var _a, _b;\n        return ({\n            field,\n            description: (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.FORMAT) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.Description,\n            width: widths[index],\n        });\n    });\n    const s1 = new Set(['sample', 'GT', 'genotype']);\n    const s2 = new Set(keys);\n    return !preFilteredRows.length ? null : (_jsxs(_Fragment, { children: [_jsx(BaseCard, { ...props, title: \"Genotype frequencies\", children: _jsx(ErrorBoundary, { FallbackComponent: ErrorMessage, children: _jsx(VariantGenotypeFrequencyTable, { rows: rows }) }) }), _jsxs(BaseCard, { ...props, title: \"Samples\", children: [error ? _jsx(Typography, { color: \"error\", children: `${error}` }) : null, _jsx(Checkbox2, { label: \"Show filters\", checked: showFilters, onChange: event => {\n                            setShowFilters(event.target.checked);\n                        } }), areSetsEqual(s1, s2) ? null : (_jsx(Checkbox2, { label: \"Show only genotype columns\", checked: showOnlyGenotypeColumns, onChange: event => {\n                            setShowOnlyGenotypeColumns(event.target.checked);\n                        } })), showFilters ? (_jsx(SampleFilters, { setFilter: setFilter, columns: columns, filter: filter })) : null, _jsx(DataGridFlexContainer, { children: _jsx(DataGrid, { rows: rows, hideFooter: rows.length < 100, columns: showOnlyGenotypeColumns\n                                ? columns.filter(f => s1.has(f.field))\n                                : columns, rowHeight: 25, columnHeaderHeight: 35, showToolbar: true }) })] })] }));\n}\n","export const variantFieldDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Suspense, lazy } from 'react';\nimport { parseBreakend } from '@gmod/vcf';\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport AltFormatter from './AltFormatter';\nimport Formatter from './Formatter';\nimport VariantSampleGrid from './VariantSampleGrid/VariantSampleGrid';\nimport { variantFieldDescriptions } from './variantFieldDescriptions';\nconst LaunchBreakendPanel = lazy(() => import('./LaunchBreakendPanel/LaunchBreakendPanel'));\nconst VariantConsequenceDataGrid = lazy(() => import('./VariantConsequence/VariantConsequenceDataGrid'));\nfunction AnnPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const annDesc = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.ANN) === null || _b === void 0 ? void 0 : _b.Description;\n    const annFields = ((_d = (_c = annDesc === null || annDesc === void 0 ? void 0 : annDesc.match(/.*Functional annotations:'(.*)'$/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const ann = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.ANN) || [];\n    return (_jsx(VariantConsequenceDataGrid, { fields: annFields, data: ann, title: \"Variant ANN field\" }));\n}\nfunction CsqPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const csqDescription = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.CSQ) === null || _b === void 0 ? void 0 : _b.Description;\n    const csqFields = ((_d = (_c = csqDescription === null || csqDescription === void 0 ? void 0 : csqDescription.match(/.*Format: (.*)/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const csq = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.CSQ) || [];\n    return (_jsx(VariantConsequenceDataGrid, { fields: csqFields, data: csq, title: \"Variant CSQ field\" }));\n}\nfunction LaunchBreakendWidgetArea({ model, }) {\n    const { featureData } = model;\n    const feat = JSON.parse(JSON.stringify(featureData));\n    const { type = '' } = feat;\n    return type === 'breakend' ? (_jsx(LaunchBreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : type === 'translocation' ? (_jsx(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : type === 'paired_feature' ? (_jsx(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.mate.refName}:${feat.mate.start}`] })) : type.includes('inversion') ||\n        type.includes('deletion') ||\n        type.includes('duplication') ||\n        type.includes('cnv') ||\n        type.includes('sv') ? (_jsx(LaunchBreakendPanel, { feature: {\n            uniqueId: 'random',\n            refName: feat.refName,\n            start: feat.start,\n            end: feat.start + 1,\n            mate: {\n                refName: feat.refName,\n                start: feat.end,\n                end: feat.end + 1,\n            },\n        }, model: model, locStrings: [`${feat.refName}:${feat.end}`] })) : null;\n}\nconst FeatDefined = observer(function (props) {\n    const { feat, model } = props;\n    const { descriptions } = model;\n    const { samples, ...rest } = feat;\n    const { REF } = rest;\n    return (_jsxs(Paper, { \"data-testid\": \"variant-side-drawer\", children: [_jsx(FeatureDetails, { feature: rest, descriptions: {\n                    ...variantFieldDescriptions,\n                    ...descriptions,\n                }, formatter: (value, key) => {\n                    return key === 'ALT' ? (_jsx(AltFormatter, { value: `${value}`, ref: REF })) : (_jsx(Formatter, { value: value }));\n                }, ...props }), _jsxs(Suspense, { fallback: null, children: [_jsx(CsqPanel, { feature: rest, descriptions: descriptions }), _jsx(AnnPanel, { feature: rest, descriptions: descriptions }), _jsx(LaunchBreakendWidgetArea, { model: model })] }), _jsx(VariantSampleGrid, { feature: feat, ...props, descriptions: descriptions })] }));\n});\nconst VariantFeatureWidget = observer(function (props) {\n    const { model } = props;\n    const { featureData } = model;\n    const feat = structuredClone(featureData);\n    return feat ? (_jsx(FeatDefined, { feat: feat, ...props })) : (_jsx(\"div\", { children: \"No feature loaded, may not be available after page refresh because it was too large for localStorage\" }));\n});\nexport default VariantFeatureWidget;\n"],"file":"assets/VariantFeatureWidget-_VELUTEP.js"}