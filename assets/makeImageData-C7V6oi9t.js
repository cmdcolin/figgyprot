import{a0 as J,u as q,aR as Y}from"./index-DRDIumvF.js";import{d as K,f as a,g as L,a as N}from"./drawPhased-Cu8PQyBe.js";import"./util-Cozj6Xfd.js";async function ee({ctx:n,canvasWidth:w,canvasHeight:F,renderArgs:G}){const{renderingMode:I,minorAlleleFrequencyFilter:Q,sources:d,features:U,stopToken:C,lengthCutoffFilter:V}=G,{statusCallback:O=()=>{}}=G,u=F/d.length;J.checkStopToken(C);const g=await q.updateStatus("Calculating stats",O,()=>Y({stopToken:C,features:U.values(),minorAlleleFrequencyFilter:Q,lengthCutoffFilter:V}));J.checkStopToken(C);const z=[],X=g.length,p=w/X;return await q.updateStatus("Drawing variant matrix",O,()=>{const T={};q.forEachWithStopTokenCheck(g,C,({feature:v,mostFrequentAlt:B},H)=>{var b,R,A;const E=[];if((b=v.get("FORMAT"))===null||b===void 0?void 0:b.includes("PS")){const M=v.get("samples"),i=H/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=M[_];if(e){const s=(R=e.GT)===null||R===void 0?void 0:R[0];if(s){E.push(s);const o=s.includes("|");if(I==="phased")if(o){const l=(A=e.PS)===null||A===void 0?void 0:A[0],f=s.split("|");K(f,n,i,c,p,u,j,l)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let l=T[s];if(l===void 0){let f=0,k=0,S=0,P=0;const y=s.split(/[/|]/),h=y.length;for(let r=0;r<h;r++){const D=y[r];D===B?f++:D==="0"?P++:D==="."?k++:S++}l=L(P,f,S,k,h,!0),T[s]=l}l&&N(l,n,i,c,p,u)}}}}}else{const M=v.get("genotypes"),i=H/g.length*w,m=d.length;for(let t=0;t<m;t++){const c=t/m*F,{name:_,HP:j}=d[t],e=M[_];if(e){E.push(e);const s=e.includes("|");if(I==="phased")if(s){const o=e.split("|");K(o,n,i,c,p,u,j)}else n.fillStyle="black",n.fillRect(i-a,c-a,p+a,u+a);else{let o=T[e];if(o===void 0){let l=0,f=0,k=0,S=0;const P=e.split(/[/|]/),y=P.length;for(let h=0;h<y;h++){const r=P[h];r===B?l++:r==="0"?S++:r==="."?f++:k++}o=L(S,l,k,f,y,!0),T[e]=o}o&&N(o,n,i,c,p,u)}}}}z.push(E)})}),{mafs:g,arr:z}}export{ee as makeImageData};
//# sourceMappingURL=makeImageData-C7V6oi9t.js.map
