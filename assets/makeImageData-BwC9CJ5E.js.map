{"version":3,"file":"makeImageData-BwC9CJ5E.js","sources":["../../node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantMatrixRenderer/makeImageData.js"],"sourcesContent":["import { updateStatus } from '@jbrowse/core/util';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { f2 } from '../shared/constants';\nimport { drawColorAlleleCount } from '../shared/drawAlleleCount';\nimport { drawPhased } from '../shared/drawPhased';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils';\nexport async function makeImageData({ ctx, canvasWidth, canvasHeight, renderArgs, }) {\n    const { renderingMode: renderingMode, minorAlleleFrequencyFilter, sources, features, stopToken, } = renderArgs;\n    const { statusCallback = () => { } } = renderArgs;\n    const h = canvasHeight / sources.length;\n    checkStopToken(stopToken);\n    const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(features.values(), minorAlleleFrequencyFilter);\n    checkStopToken(stopToken);\n    const arr = [];\n    const m = mafs.length;\n    const w = canvasWidth / m;\n    await updateStatus('Drawing variant matrix', statusCallback, () => {\n        var _a, _b, _c;\n        let start = performance.now();\n        for (let i = 0; i < m; i++) {\n            if (performance.now() - start > 400) {\n                checkStopToken(stopToken);\n                start = performance.now();\n            }\n            const arr2 = [];\n            const { feature, mostFrequentAlt } = mafs[i];\n            const hasPhaseSet = (_a = feature.get('FORMAT')) === null || _a === void 0 ? void 0 : _a.includes('PS');\n            if (hasPhaseSet) {\n                const samp = feature.get('samples');\n                const x = (i / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const s = samp[name];\n                    if (s) {\n                        const genotype = (_b = s.GT) === null || _b === void 0 ? void 0 : _b[0];\n                        if (genotype) {\n                            arr2.push(genotype);\n                            const isPhased = genotype.includes('|');\n                            if (renderingMode === 'phased') {\n                                if (isPhased) {\n                                    const PS = (_c = s.PS) === null || _c === void 0 ? void 0 : _c[0];\n                                    const alleles = genotype.split('|');\n                                    drawPhased(alleles, ctx, x, y, w, h, HP, PS);\n                                }\n                                else {\n                                    ctx.fillStyle = 'black';\n                                    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                                }\n                            }\n                            else {\n                                const alleles = genotype.split(/[/|]/);\n                                drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const samp = feature.get('genotypes');\n                const x = (i / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const genotype = samp[name];\n                    if (genotype) {\n                        arr2.push(genotype);\n                        const isPhased = genotype.includes('|');\n                        if (renderingMode === 'phased') {\n                            if (isPhased) {\n                                const alleles = genotype.split('|');\n                                drawPhased(alleles, ctx, x, y, w, h, HP);\n                            }\n                            else {\n                                ctx.fillStyle = 'black';\n                                ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                            }\n                        }\n                        else {\n                            const alleles = genotype.split(/[/|]/);\n                            drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt);\n                        }\n                    }\n                }\n            }\n            arr.push(arr2);\n        }\n    });\n    return {\n        mafs,\n        arr,\n    };\n}\n"],"names":["makeImageData","ctx","canvasWidth","canvasHeight","renderArgs","renderingMode","minorAlleleFrequencyFilter","sources","features","stopToken","statusCallback","h","checkStopToken","mafs","getFeaturesThatPassMinorAlleleFrequencyFilter","arr","m","w","updateStatus","_a","_b","_c","start","i","arr2","feature","mostFrequentAlt","samp","x","sln","j","y","name","HP","genotype","isPhased","PS","alleles","drawPhased","f2","drawColorAlleleCount"],"mappings":"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","x_google_ignoreList":[0]}