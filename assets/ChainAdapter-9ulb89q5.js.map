{"version":3,"file":"ChainAdapter-9ulb89q5.js","sources":["../../node_modules/@jbrowse/plugin-comparative-adapters/esm/ChainAdapter/util.js","../../node_modules/@jbrowse/plugin-comparative-adapters/esm/ChainAdapter/ChainAdapter.js"],"sourcesContent":["import { getProgressDisplayStr } from '@jbrowse/core/util';\nfunction generate_record(qname, qstart, qend, qstrand, tname, tstart, tend, cigar, numMatches) {\n    return {\n        qname,\n        qstart,\n        qend,\n        tname,\n        tstart,\n        tend,\n        strand: qstrand === '-' ? -1 : 1,\n        extra: {\n            numMatches,\n            blockLen: Math.max(qend - qstart, tend - tstart),\n            mappingQual: 0,\n            cg: cigar,\n        },\n    };\n}\nexport function paf_chain2paf(buffer, opts) {\n    const { statusCallback = () => { } } = opts || {};\n    let t_name = '';\n    let t_start = 0;\n    let t_end = 0;\n    let q_name = '';\n    let q_size = '';\n    let q_strand = '';\n    let q_start = 0;\n    let q_end = 0;\n    let num_matches = 0;\n    let cigar = '';\n    const records = [];\n    let i = 0;\n    let blockStart = 0;\n    const decoder = new TextDecoder('utf8');\n    while (blockStart < buffer.length) {\n        if (i++ % 10000 === 0) {\n            statusCallback(`Loading ${getProgressDisplayStr(blockStart, buffer.length)}`);\n        }\n        const n = buffer.indexOf(10, blockStart);\n        if (n === -1) {\n            break;\n        }\n        const b = buffer.subarray(blockStart, n);\n        const l = decoder.decode(b).trim();\n        blockStart = n + 1;\n        const l_tab = l.replaceAll(' ', '\\t');\n        const l_vec = l_tab.split('\\t');\n        if (l_vec[0] === 'chain') {\n            if (cigar) {\n                records.push(generate_record(q_name, q_start, q_end, q_strand, t_name, t_start, t_end, cigar, num_matches));\n            }\n            t_name = l_vec[2];\n            t_start = +l_vec[5];\n            t_end = +l_vec[6];\n            q_name = l_vec[7];\n            q_size = l_vec[8];\n            q_strand = l_vec[9];\n            q_start = +l_vec[10];\n            q_end = +l_vec[11];\n            if (q_strand === '-') {\n                const tmp = q_start;\n                q_start = +q_size - q_end;\n                q_end = +q_size - tmp;\n            }\n            num_matches = 0;\n            cigar = '';\n        }\n        else {\n            const size_ungapped_alignment = +l_vec[0] || 0;\n            const diff_in_target = l_vec.length > 1 ? +l_vec[1] : 0;\n            const diff_in_query = l_vec.length > 2 ? +l_vec[2] : 0;\n            if (size_ungapped_alignment !== 0) {\n                num_matches += +size_ungapped_alignment;\n                cigar += `${size_ungapped_alignment}M`;\n            }\n            if (diff_in_query !== 0) {\n                cigar += `${diff_in_query}I`;\n            }\n            if (diff_in_target !== 0) {\n                cigar += `${diff_in_target}D`;\n            }\n        }\n    }\n    if (cigar) {\n        generate_record(q_name, q_start, q_end, q_strand, t_name, t_start, t_end, cigar, num_matches);\n    }\n    return records;\n}\n","import { fetchAndMaybeUnzip } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { paf_chain2paf } from './util';\nimport PAFAdapter from '../PAFAdapter/PAFAdapter';\nexport default class ChainAdapter extends PAFAdapter {\n    async setupPre(opts) {\n        const loc = openLocation(this.getConf('chainLocation'), this.pluginManager);\n        const buf = await fetchAndMaybeUnzip(loc, opts);\n        return paf_chain2paf(buf);\n    }\n}\n"],"names":["generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","paf_chain2paf","buffer","opts","statusCallback","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","i","blockStart","decoder","getProgressDisplayStr","n","b","l","l_vec","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","ChainAdapter","PAFAdapter","loc","openLocation","buf","fetchAndMaybeUnzip"],"mappings":"oJACA,SAASA,EAAgBC,EAAOC,EAAQC,EAAMC,EAASC,EAAOC,EAAQC,EAAMC,EAAOC,EAAY,CAC3F,MAAO,CACH,MAAAR,EACA,OAAAC,EACA,KAAAC,EACA,MAAAE,EACA,OAAAC,EACA,KAAAC,EACA,OAAQH,IAAY,IAAM,GAAK,EAC/B,MAAO,CACH,WAAAK,EACA,SAAU,KAAK,IAAIN,EAAOD,EAAQK,EAAOD,CAAM,EAC/C,YAAa,EACb,GAAIE,CACP,CACJ,CACL,CACO,SAASE,EAAcC,EAAQC,EAAM,CACxC,KAAM,CAAE,eAAAC,EAAiB,IAAM,CAAG,CAAA,EAAa,CAAE,EACjD,IAAIC,EAAS,GACTC,EAAU,EACVC,EAAQ,EACRC,EAAS,GACTC,EAAS,GACTC,EAAW,GACXC,EAAU,EACVC,EAAQ,EACRC,EAAc,EACdd,EAAQ,GACZ,MAAMe,EAAU,CAAE,EAClB,IAAIC,EAAI,EACJC,EAAa,EACjB,MAAMC,EAAU,IAAI,YAAY,MAAM,EACtC,KAAOD,EAAad,EAAO,QAAQ,CAC3Ba,IAAM,MAAU,GAChBX,EAAe,WAAWc,EAAqB,sBAACF,EAAYd,EAAO,MAAM,CAAC,EAAE,EAEhF,MAAMiB,EAAIjB,EAAO,QAAQ,GAAIc,CAAU,EACvC,GAAIG,IAAM,GACN,MAEJ,MAAMC,EAAIlB,EAAO,SAASc,EAAYG,CAAC,EACjCE,EAAIJ,EAAQ,OAAOG,CAAC,EAAE,KAAM,EAClCJ,EAAaG,EAAI,EAEjB,MAAMG,EADQD,EAAE,WAAW,IAAK,GAAI,EAChB,MAAM,GAAI,EAC9B,GAAIC,EAAM,CAAC,IAAM,QAAS,CAYtB,GAXIvB,GACAe,EAAQ,KAAKvB,EAAgBiB,EAAQG,EAASC,EAAOF,EAAUL,EAAQC,EAASC,EAAOR,EAAOc,CAAW,CAAC,EAE9GR,EAASiB,EAAM,CAAC,EAChBhB,EAAU,CAACgB,EAAM,CAAC,EAClBf,EAAQ,CAACe,EAAM,CAAC,EAChBd,EAASc,EAAM,CAAC,EAChBb,EAASa,EAAM,CAAC,EAChBZ,EAAWY,EAAM,CAAC,EAClBX,EAAU,CAACW,EAAM,EAAE,EACnBV,EAAQ,CAACU,EAAM,EAAE,EACbZ,IAAa,IAAK,CAClB,MAAMa,EAAMZ,EACZA,EAAU,CAACF,EAASG,EACpBA,EAAQ,CAACH,EAASc,CAClC,CACYV,EAAc,EACdd,EAAQ,EACpB,KACa,CACD,MAAMyB,EAA0B,CAACF,EAAM,CAAC,GAAK,EACvCG,EAAiBH,EAAM,OAAS,EAAI,CAACA,EAAM,CAAC,EAAI,EAChDI,EAAgBJ,EAAM,OAAS,EAAI,CAACA,EAAM,CAAC,EAAI,EACjDE,IAA4B,IAC5BX,GAAe,CAACW,EAChBzB,GAAS,GAAGyB,CAAuB,KAEnCE,IAAkB,IAClB3B,GAAS,GAAG2B,CAAa,KAEzBD,IAAmB,IACnB1B,GAAS,GAAG0B,CAAc,IAE1C,CACA,CAII,OAAOX,CACX,CCnFe,MAAMa,UAAqBC,CAAW,CACjD,MAAM,SAASzB,EAAM,CACjB,MAAM0B,EAAMC,EAAAA,aAAa,KAAK,QAAQ,eAAe,EAAG,KAAK,aAAa,EACpEC,EAAM,MAAMC,qBAAmBH,EAAK1B,CAAI,EAC9C,OAAOF,EAAc8B,CAAG,CAChC,CACA","x_google_ignoreList":[0,1]}