import{bo as A,bp as B,b0 as H}from"./index-CT2bM4yV.js";import{d as D,f as l,a as E}from"./drawPhased-Cd5I2PNP.js";import"./util-CGTuupHM.js";async function Q({ctx:t,canvasWidth:d,canvasHeight:h,renderArgs:M}){const{renderingMode:_,minorAlleleFrequencyFilter:G,sources:c,features:I,stopToken:g}=M,{statusCallback:O=()=>{}}=M,r=h/c.length;A(g);const f=B(I.values(),G);A(g);const q=[],C=f.length,i=d/C;return await H.updateStatus("Drawing variant matrix",O,()=>{var P,y,S;let R=performance.now();for(let p=0;p<C;p++){performance.now()-R>400&&(A(g),R=performance.now());const w=[],{feature:b,mostFrequentAlt:j}=f[p];if((P=b.get("FORMAT"))===null||P===void 0?void 0:P.includes("PS")){const k=b.get("samples"),o=p/f.length*d,u=c.length;for(let e=0;e<u;e++){const n=e/u*h,{name:F,HP:v}=c[e],s=k[F];if(s){const a=(y=s.GT)===null||y===void 0?void 0:y[0];if(a){w.push(a);const m=a.includes("|");if(_==="phased")if(m){const T=(S=s.PS)===null||S===void 0?void 0:S[0],z=a.split("|");D(z,t,o,n,i,r,v,T)}else t.fillStyle="black",t.fillRect(o-l,n-l,i+l,r+l);else{const T=a.split(/[/|]/);E(T,t,o,n,i,r,j)}}}}}else{const k=b.get("genotypes"),o=p/f.length*d,u=c.length;for(let e=0;e<u;e++){const n=e/u*h,{name:F,HP:v}=c[e],s=k[F];if(s){w.push(s);const a=s.includes("|");if(_==="phased")if(a){const m=s.split("|");D(m,t,o,n,i,r,v)}else t.fillStyle="black",t.fillRect(o-l,n-l,i+l,r+l);else{const m=s.split(/[/|]/);E(m,t,o,n,i,r,j)}}}}q.push(w)}}),{mafs:f,arr:q}}export{Q as makeImageData};
//# sourceMappingURL=makeImageData-BwC9CJ5E.js.map
