{"version":3,"file":"Gff3TabixAdapter-Cs0GRHcH.js","sources":["../../node_modules/@jbrowse/plugin-gff3/esm/Gff3TabixAdapter/Gff3TabixAdapter.js"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { doesIntersect2 } from '@jbrowse/core/util/range';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature';\nimport { parseStringSync } from 'gff-nostream';\nimport { featureData } from '../featureData';\nexport default class Gff3TabixAdapter extends BaseFeatureDataAdapter {\n    async configurePre(_opts) {\n        const gffGzLocation = this.getConf('gffGzLocation');\n        const indexType = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const dontRedispatch = this.getConf('dontRedispatch');\n        const gff = new TabixIndexedFile({\n            filehandle: openLocation(gffGzLocation, this.pluginManager),\n            csiFilehandle: indexType === 'CSI' ? openLocation(loc, this.pluginManager) : undefined,\n            tbiFilehandle: indexType !== 'CSI' ? openLocation(loc, this.pluginManager) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n            renameRefSeqs: (n) => n,\n        });\n        return {\n            gff,\n            dontRedispatch,\n            header: await gff.getHeader(),\n        };\n    }\n    async configurePre2() {\n        if (!this.configured) {\n            this.configured = this.configurePre().catch((e) => {\n                this.configured = undefined;\n                throw e;\n            });\n        }\n        return this.configured;\n    }\n    async configure(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        return updateStatus('Downloading index', statusCallback, () => this.configurePre2());\n    }\n    async getRefNames(opts = {}) {\n        const { gff } = await this.configure(opts);\n        return gff.getReferenceSequenceNames(opts);\n    }\n    async getHeader(opts = {}) {\n        const { gff } = await this.configure(opts);\n        return gff.getHeader();\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const { gff } = await this.configure(opts);\n            const metadata = await gff.getMetadata();\n            await this.getFeaturesHelper(query, opts, metadata, observer, true);\n        }, opts.stopToken);\n    }\n    async getFeaturesHelper(query, opts, metadata, observer, allowRedispatch, originalQuery = query) {\n        var _a, _b;\n        const { statusCallback = () => { } } = opts;\n        try {\n            const lines = [];\n            const { dontRedispatch, gff } = await this.configure(opts);\n            await updateStatus('Downloading features', statusCallback, () => gff.getLines(query.refName, query.start, query.end, (line, fileOffset) => {\n                lines.push(this.parseLine(metadata.columnNumbers, line, fileOffset));\n            }));\n            if (allowRedispatch && lines.length) {\n                let minStart = Number.POSITIVE_INFINITY;\n                let maxEnd = Number.NEGATIVE_INFINITY;\n                for (const line of lines) {\n                    const featureType = line.fields[2];\n                    if (!dontRedispatch.includes(featureType)) {\n                        const start = line.start - 1;\n                        if (start < minStart) {\n                            minStart = start;\n                        }\n                        if (line.end > maxEnd) {\n                            maxEnd = line.end;\n                        }\n                    }\n                }\n                if (maxEnd > query.end || minStart < query.start) {\n                    await this.getFeaturesHelper({ ...query, start: minStart, end: maxEnd }, opts, metadata, observer, false, query);\n                    return;\n                }\n            }\n            const gff3 = lines\n                .map(lineRecord => {\n                if (lineRecord.fields[8] && lineRecord.fields[8] !== '.') {\n                    if (!lineRecord.fields[8].includes('_lineHash')) {\n                        lineRecord.fields[8] += `;_lineHash=${lineRecord.lineHash}`;\n                    }\n                }\n                else {\n                    lineRecord.fields[8] = `_lineHash=${lineRecord.lineHash}`;\n                }\n                return lineRecord.fields.join('\\t');\n            })\n                .join('\\n');\n            for (const featureLocs of parseStringSync(gff3)) {\n                for (const featureLoc of featureLocs) {\n                    const f = new SimpleFeature({\n                        data: featureData(featureLoc),\n                        id: `${this.id}-offset-${(_b = (_a = featureLoc.attributes) === null || _a === void 0 ? void 0 : _a._lineHash) === null || _b === void 0 ? void 0 : _b[0]}`,\n                    });\n                    if (doesIntersect2(f.get('start'), f.get('end'), originalQuery.start, originalQuery.end)) {\n                        observer.next(f);\n                    }\n                }\n            }\n            observer.complete();\n        }\n        catch (e) {\n            observer.error(e);\n        }\n    }\n    parseLine(columnNumbers, line, fileOffset) {\n        const fields = line.split('\\t');\n        return {\n            start: +fields[columnNumbers.start - 1],\n            end: +fields[columnNumbers.end - 1],\n            lineHash: fileOffset,\n            fields,\n        };\n    }\n}\n"],"names":["Gff3TabixAdapter","BaseFeatureDataAdapter","_opts","gffGzLocation","indexType","loc","dontRedispatch","gff","TabixIndexedFile","openLocation","n","e","opts","statusCallback","updateStatus","query","ObservableCreate","observer","metadata","allowRedispatch","originalQuery","_a","_b","lines","line","fileOffset","minStart","maxEnd","featureType","start","gff3","lineRecord","featureLocs","parseStringSync","featureLoc","f","SimpleFeature","featureData","doesIntersect2","columnNumbers","fields"],"mappings":"kcASe,MAAMA,UAAyBC,EAAAA,sBAAuB,CACjE,MAAM,aAAaC,EAAO,CACtB,MAAMC,EAAgB,KAAK,QAAQ,eAAe,EAC5CC,EAAY,KAAK,QAAQ,CAAC,QAAS,WAAW,CAAC,EAC/CC,EAAM,KAAK,QAAQ,CAAC,QAAS,UAAU,CAAC,EACxCC,EAAiB,KAAK,QAAQ,gBAAgB,EAC9CC,EAAM,IAAIC,EAAiB,CAC7B,WAAYC,EAAY,aAACN,EAAe,KAAK,aAAa,EAC1D,cAAeC,IAAc,MAAQK,EAAAA,aAAaJ,EAAK,KAAK,aAAa,EAAI,OAC7E,cAAeD,IAAc,MAAQK,EAAAA,aAAaJ,EAAK,KAAK,aAAa,EAAI,OAC7E,eAAgB,GAAK,GAAK,GAC1B,cAAgBK,GAAMA,CAClC,CAAS,EACD,MAAO,CACH,IAAAH,EACA,eAAAD,EACA,OAAQ,MAAMC,EAAI,UAAW,CAChC,CACT,CACI,MAAM,eAAgB,CAClB,OAAK,KAAK,aACN,KAAK,WAAa,KAAK,aAAY,EAAG,MAAOI,GAAM,CAC/C,WAAK,WAAa,OACZA,CACtB,CAAa,GAEE,KAAK,UACpB,CACI,MAAM,UAAUC,EAAM,CAClB,KAAM,CAAE,eAAAC,EAAiB,IAAM,EAAK,EAAGD,GAAQ,CAAE,EACjD,OAAOE,EAAAA,aAAa,oBAAqBD,EAAgB,IAAM,KAAK,cAAa,CAAE,CAC3F,CACI,MAAM,YAAYD,EAAO,GAAI,CACzB,KAAM,CAAE,IAAAL,CAAK,EAAG,MAAM,KAAK,UAAUK,CAAI,EACzC,OAAOL,EAAI,0BAA0BK,CAAI,CACjD,CACI,MAAM,UAAUA,EAAO,GAAI,CACvB,KAAM,CAAE,IAAAL,CAAK,EAAG,MAAM,KAAK,UAAUK,CAAI,EACzC,OAAOL,EAAI,UAAW,CAC9B,CACI,YAAYQ,EAAOH,EAAO,GAAI,CAC1B,OAAOI,EAAAA,iBAAiB,MAAOC,GAAa,CACxC,KAAM,CAAE,IAAAV,CAAK,EAAG,MAAM,KAAK,UAAUK,CAAI,EACnCM,EAAW,MAAMX,EAAI,YAAa,EACxC,MAAM,KAAK,kBAAkBQ,EAAOH,EAAMM,EAAUD,EAAU,EAAI,CAC9E,EAAWL,EAAK,SAAS,CACzB,CACI,MAAM,kBAAkBG,EAAOH,EAAMM,EAAUD,EAAUE,EAAiBC,EAAgBL,EAAO,CAC7F,IAAIM,EAAIC,EACR,KAAM,CAAE,eAAAT,EAAiB,IAAM,CAAG,CAAA,EAAKD,EACvC,GAAI,CACA,MAAMW,EAAQ,CAAE,EACV,CAAE,eAAAjB,EAAgB,IAAAC,CAAG,EAAK,MAAM,KAAK,UAAUK,CAAI,EAIzD,GAHA,MAAME,EAAAA,aAAa,uBAAwBD,EAAgB,IAAMN,EAAI,SAASQ,EAAM,QAASA,EAAM,MAAOA,EAAM,IAAK,CAACS,EAAMC,IAAe,CACvIF,EAAM,KAAK,KAAK,UAAUL,EAAS,cAAeM,EAAMC,CAAU,CAAC,CACnF,CAAa,CAAC,EACEN,GAAmBI,EAAM,OAAQ,CACjC,IAAIG,EAAW,OAAO,kBAClBC,EAAS,OAAO,kBACpB,UAAWH,KAAQD,EAAO,CACtB,MAAMK,EAAcJ,EAAK,OAAO,CAAC,EACjC,GAAI,CAAClB,EAAe,SAASsB,CAAW,EAAG,CACvC,MAAMC,EAAQL,EAAK,MAAQ,EACvBK,EAAQH,IACRA,EAAWG,GAEXL,EAAK,IAAMG,IACXA,EAASH,EAAK,IAE1C,CACA,CACgB,GAAIG,EAASZ,EAAM,KAAOW,EAAWX,EAAM,MAAO,CAC9C,MAAM,KAAK,kBAAkB,CAAE,GAAGA,EAAO,MAAOW,EAAU,IAAKC,CAAM,EAAIf,EAAMM,EAAUD,EAAU,GAAOF,CAAK,EAC/G,MACpB,CACA,CACY,MAAMe,EAAOP,EACR,IAAIQ,IACDA,EAAW,OAAO,CAAC,GAAKA,EAAW,OAAO,CAAC,IAAM,IAC5CA,EAAW,OAAO,CAAC,EAAE,SAAS,WAAW,IAC1CA,EAAW,OAAO,CAAC,GAAK,cAAcA,EAAW,QAAQ,IAI7DA,EAAW,OAAO,CAAC,EAAI,aAAaA,EAAW,QAAQ,GAEpDA,EAAW,OAAO,KAAK,GAAI,EACrC,EACI,KAAK;AAAA,CAAI,EACd,UAAWC,KAAeC,EAAgBH,CAAI,EAC1C,UAAWI,KAAcF,EAAa,CAClC,MAAMG,EAAI,IAAIC,EAAc,CACxB,KAAMC,EAAYH,CAAU,EAC5B,GAAI,GAAG,KAAK,EAAE,YAAYZ,GAAMD,EAAKa,EAAW,cAAgB,MAAQb,IAAO,OAAS,OAASA,EAAG,aAAe,MAAQC,IAAO,OAAS,OAASA,EAAG,CAAC,CAAC,EACjL,CAAqB,EACGgB,EAAc,eAACH,EAAE,IAAI,OAAO,EAAGA,EAAE,IAAI,KAAK,EAAGf,EAAc,MAAOA,EAAc,GAAG,GACnFH,EAAS,KAAKkB,CAAC,CAEvC,CAEYlB,EAAS,SAAU,CAC/B,OACeN,EAAG,CACNM,EAAS,MAAMN,CAAC,CAC5B,CACA,CACI,UAAU4B,EAAef,EAAMC,EAAY,CACvC,MAAMe,EAAShB,EAAK,MAAM,GAAI,EAC9B,MAAO,CACH,MAAO,CAACgB,EAAOD,EAAc,MAAQ,CAAC,EACtC,IAAK,CAACC,EAAOD,EAAc,IAAM,CAAC,EAClC,SAAUd,EACV,OAAAe,CACH,CACT,CACA","x_google_ignoreList":[0]}