import{bs as b,ch as y,ci as c,cj as N,ck as q}from"./index-CGKDrrCR.js";var g=/\{([0-9a-zA-Z_]+)\}/g,w=T;function T(m){var e;if(arguments.length===2&&typeof arguments[1]=="object")e=arguments[1];else{e=new Array(arguments.length-1);for(var s=1;s<arguments.length;++s)e[s-1]=arguments[s]}return(!e||!e.hasOwnProperty)&&(e={}),m.replace(g,function(i,d,r){var t;return m[r-1]==="{"&&m[r+i.length]==="}"?d:(t=e.hasOwnProperty(d)?e[d]:null,t??"")})}const j=b(w);class R extends y.BaseFeatureDataAdapter{constructor(e,s,a){super(e,s,a),this.endpoint=c.readConfObject(e,"endpoint").uri,this.queryTemplate=c.readConfObject(e,"queryTemplate"),this.additionalQueryParams=c.readConfObject(e,"additionalQueryParams"),this.refNamesQueryTemplate=c.readConfObject(e,"refNamesQueryTemplate"),this.configRefNames=c.readConfObject(e,"refNames")}async getRefNames(e){if(this.refNames)return this.refNames;if(this.refNamesQueryTemplate){const s=encodeURIComponent(this.refNamesQueryTemplate),a=await this.querySparql(s,e);this.refNames=this.resultsToRefNames(a)}else this.refNames=this.configRefNames;return this.refNames}getFeatures(e,s={}){return N(async a=>{const i=encodeURIComponent(j(this.queryTemplate,e)),{refName:d}=e,r=await this.querySparql(i,s),t=this.resultsToFeatures(r,d);for(const u of t)a.next(u);a.complete()},s.stopToken)}async querySparql(e,s){let a="";this.additionalQueryParams.length&&(a=`&${this.additionalQueryParams.join("&")}`);const i=`${this.endpoint}?query=${e}${a}`;return(await fetch(i,{headers:{accept:"application/json,application/sparql-results+json"}})).json()}resultsToRefNames(e){const s=e.results.bindings||[];if(!e.head.vars.includes("refName"))throw new Error('"refName" not found in refNamesQueryTemplate response');return s.map(i=>i.refName.value)}resultsToFeatures(e,s){const a=e.results.bindings||[],i=e.head.vars,d=["start","end","uniqueId"];for(const t of d)i.includes(t)||console.error(`Required field ${t} missing from feature data`);const r={};for(const t of a){const u=[{}];for(let n of i)if(n in t){const{value:l}=t[n];let f=0;for(;n.startsWith("sub_");)n=n.slice(4),f+=1;for(;f>u.length-1;)u.push({});u[f][n]=l}for(const[n,l]of u.entries()){const{uniqueId:f,start:p,end:o,strand:h}=l;n<u.length-1&&(u[n+1].parentUniqueId=f),r[f]={data:{...l,uniqueId:f,refName:s,start:Number.parseInt(p,10),end:Number.parseInt(o,10),strand:Number.parseInt(h,10)||0}}}}for(const[t,u]of Object.entries(r)){const n=u.data.parentUniqueId;if(u.data.parentUniqueId=void 0,n){const l=r[n];if(l)l.data.subfeatures||(l.data.subfeatures=[]),l.data.subfeatures.push({...u.data,uniqueId:t}),delete r[t];else{const f=Object.values(r).map(o=>o.data.subfeatures).filter(o=>!!o).flat();let p=!1;for(const o of f){if(o.uniqueId===n){o.subfeatures||(o.subfeatures=[]),o.subfeatures.push({...u.data,uniqueId:t}),delete r[t],p=!0;break}o.subfeatures&&f.push(...o.subfeatures)}p||console.error(`Could not find parentID ${n}`)}}}return Object.keys(r).map(t=>new q({...r[t].data,uniqueId:t,subfeatures:r[t].data.subfeatures}))}async hasDataForRefName(e,s={}){const a=await this.getRefNames(s);return!(a.length&&!a.includes(e))}freeResources(){}}export{R as default};
//# sourceMappingURL=SPARQLAdapter-BenrHIlT.js.map
