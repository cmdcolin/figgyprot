import{bo as f,bp as Y,bq as j,b0 as v}from"./index-CT2bM4yV.js";import{f as e,d as B,a as D}from"./drawPhased-Cd5I2PNP.js";import"./util-CGTuupHM.js";async function N(n,P){const{scrollTop:b,minorAlleleFrequencyFilter:w,sources:m,rowHeight:p,features:x,regions:y,bpPerPx:F,renderingMode:M,stopToken:l}=P,k=y[0];f(l);const q=Y(x.values(),w);f(l);const u=new j;let h=performance.now();for(const{mostFrequentAlt:A,feature:g}of q){performance.now()-h>400&&(f(l),h=performance.now());const[d,S]=v.featureSpanPx(g,k,F),r=Math.max(Math.round(S-d),2),T=g.get("genotypes");let t=-b;const C=m.length;for(let c=0;c<C;c++){const{name:H,HP:R}=m[c],o=T[H],s=Math.floor(d),a=Math.max(p,1);if(o){u.insert({minX:s-e,maxX:s+r+e,minY:t-e,maxY:t+a+e,genotype:o});const X=o.includes("|");if(M==="phased")if(X){const i=o.split("|");B(i,n,s,t,r,a,R)}else n.fillStyle="black",n.fillRect(s-e,t-e,r+e,a+e);else{const i=o.split(/[/|]/);D(i,n,s,t,r,a,A)}}t+=p}}return{rbush:u.toJSON()}}export{N as makeImageData};
//# sourceMappingURL=makeImageData-xry5-KpU.js.map
