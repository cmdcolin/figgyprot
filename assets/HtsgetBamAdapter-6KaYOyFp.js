import"./remoteFile-j31HQyZd.js";import{u as T}from"./unzip-BLgeKC4_.js";import{B as A,a as I,p as k,c as y,b as x}from"./BamAdapter-BDAj0ocg.js";import"./index-DQP-8m57.js";import"./index-nn2WCNON.js";import"./crc32-BNi2TJ31.js";import"./browser-DdKr-yeI.js";import"./index-8HxHVJ6-.js";import"./QuickLRU-D0TDHcmc.js";import"./rxjs-ZYIyRYdN.js";async function b(l,t){const a=await Promise.all(l.map(async e=>{const{url:r,headers:i}=e;if(r.startsWith("data:")){const s=await fetch(r);if(!s.ok)throw new Error("failed to decode base64");const n=await s.arrayBuffer();return new Uint8Array(n)}else{const{referer:s,...n}=i,o=await fetch(r,{...t,headers:{...t==null?void 0:t.headers,...n}});if(!o.ok)throw new Error(`HTTP ${o.status} fetching ${r}: ${await o.text()}`);return new Uint8Array(await o.arrayBuffer())}}));return y(await Promise.all(a.map(e=>T(e))))}class B extends A{constructor(t){super({htsget:!0}),this.baseUrl=t.baseUrl,this.trackId=t.trackId}async*streamRecordsForRange(t,a,e,r){var o;const s=`${`${this.baseUrl}/${this.trackId}`}?referenceName=${t}&start=${a}&end=${e}&format=BAM`,n=(o=this.chrToIndex)==null?void 0:o[t];if(n===void 0)yield[];else{const c=await fetch(s,{...r});if(!c.ok)throw new Error(`HTTP ${c.status} fetching ${s}: ${await c.text()}`);const d=await c.json(),f=await b(d.htsget.urls.slice(1),r);yield*this._fetchChunkFeatures([{buffer:f,_fetchedSize:void 0,bin:0,compareTo(){return 0},toUniqueString(){return`${t}_${a}_${e}`},fetchedSize(){return 0},minv:{dataPosition:0,blockPosition:0,compareTo:()=>0},maxv:{dataPosition:Number.MAX_SAFE_INTEGER,blockPosition:0,compareTo:()=>0},toString(){return`${t}_${a}_${e}`}}],n,a,e,r)}}async _readChunk({chunk:t}){if(!t.buffer)throw new Error("expected chunk.buffer in htsget");return{data:t.buffer,cpositions:[],dpositions:[],chunk:t}}async getHeader(t={}){const a=`${this.baseUrl}/${this.trackId}?referenceName=na&class=header`,e=await fetch(a,t);if(!e.ok)throw new Error(`HTTP ${e.status} fetching ${a}: ${await e.text()}`);const r=await e.json(),i=await b(r.htsget.urls,t),s=new DataView(i.buffer);if(s.getInt32(0,!0)!==I)throw new Error("Not a BAM file");const n=s.getInt32(4,!0),c=new TextDecoder("utf8").decode(i.subarray(8,8+n)),d=k(c),f=[],g={},p=d.filter(u=>u.tag==="SQ");for(const[u,$]of p.entries()){let w="",m=0;for(const h of $.data)h.tag==="SN"?w=h.value:h.tag==="LN"&&(m=+h.value);g[w]=u,f[u]={refName:w,length:m}}return this.chrToIndex=g,this.indexToChr=f,d}}class M extends x{async configurePre(){const t=this.getConf("htsgetBase"),a=this.getConf("htsgetTrackId"),e=new B({baseUrl:t,trackId:a}),r=this.getConf("sequenceAdapter");if(r&&this.getSubAdapter){const i=await this.getSubAdapter(r);return{bam:e,sequenceAdapter:i.dataAdapter}}return{bam:e}}}export{M as default};
//# sourceMappingURL=HtsgetBamAdapter-6KaYOyFp.js.map
