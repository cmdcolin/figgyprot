import{aL as v,aM as x,am as F,an as _,aN as m,aO as b}from"./index-CGKDrrCR.js";class z extends v.BaseFeatureDataAdapter{constructor(){super(...arguments),this.gcMode="content"}async configure(){var t;const s=await((t=this.getSubAdapter)===null||t===void 0?void 0:t.call(this,this.getConf("sequenceAdapter")));if(!s)throw new Error("Error getting subadapter");return s.dataAdapter}async getRefNames(t){return(await this.configure()).getRefNames(t)}getFeatures(t,s){const{statusCallback:C=()=>{},stopToken:S}=s||{};return x(async c=>{var l;const A=await this.configure(),a=this.getConf("windowSize"),g=this.getConf("windowDelta"),n=a===1?1:Math.ceil(a/2),M=a===1,d=Math.max(0,Math.floor((t.start-n)/a)*a),f=Math.ceil((t.end+n)/a)*a;if(f<0||d>f){c.complete();return}const p=((l=(await F.firstValueFrom(A.getFeatures({...t,start:d,end:f},s).pipe(_.toArray())))[0])===null||l===void 0?void 0:l.get("seq"))||"";let w=performance.now();await m.updateStatus("Calculating GC",C,()=>{for(let e=n;e<p.length-n;e+=g){performance.now()-w>400&&(b(S),w=performance.now());const N=M?p[e]:p.slice(e-n,e+n);let r=0,i=0,h=0;for(const o of N)o==="c"||o==="C"?r++:(o==="g"||o==="G")&&i++,o!=="N"&&h++;const u=d,k=this.gcMode==="content"?(i+r)/(h||1):this.gcMode==="skew"?(i-r)/(i+r||1):0;c.next(new m.SimpleFeature({uniqueId:`${this.id}_${u+e}`,refName:t.refName,start:u+e,end:u+e+g,score:k}))}}),c.complete()})}freeResources(){}}z.capabilities=["hasLocalStats"];export{z as default};
//# sourceMappingURL=GCContentAdapter-BIOStF_3.js.map
