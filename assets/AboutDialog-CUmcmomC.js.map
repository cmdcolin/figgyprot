{"version":3,"file":"AboutDialog-CUmcmomC.js","sources":["../../node_modules/@jbrowse/product-core/esm/ui/FileInfoPanel.js","../../node_modules/@jbrowse/product-core/esm/ui/RefNameInfoDialog.js","../../node_modules/@jbrowse/product-core/esm/ui/AboutDialogContents.js","../../node_modules/@jbrowse/product-core/esm/ui/AboutDialog.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nexport default function FileInfoPanel({ config, }) {\n    const [error, setError] = useState();\n    const [info, setInfo] = useState();\n    const session = getSession(config);\n    const { rpcManager } = session;\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const adapterConfig = readConfObject(config, 'adapter');\n                const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n                    adapterConfig,\n                });\n                setInfo(result);\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n        })();\n    }, [config, rpcManager]);\n    const details = typeof info === 'string'\n        ? {\n            header: `<pre>${info\n                .replaceAll('<', '&lt;')\n                .replaceAll('>', '&gt;')}</pre>`,\n        }\n        : info || {};\n    return (_jsx(BaseCard, { title: \"File info\", children: error ? (_jsx(ErrorMessage, { error: error })) : info === undefined ? (_jsx(LoadingEllipses, { message: \"Loading file data\" })) : (_jsx(Attributes, { attributes: details })) }));\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks';\nimport { Button, DialogContent } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst MAX_REF_NAMES = 10000;\nconst useStyles = makeStyles()(theme => ({\n    container: {\n        minWidth: 800,\n    },\n    refNames: {\n        maxHeight: 300,\n        overflow: 'auto',\n        flexGrow: 1,\n        background: theme.palette.background.default,\n    },\n}));\nconst RefNameInfoDialog = observer(function ({ config, onClose, }) {\n    const { classes } = useStyles();\n    const [error, setError] = useState();\n    const [refNames, setRefNames] = useState();\n    const [copied, setCopied] = useState(false);\n    const { rpcManager } = getSession(config);\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const map = await Promise.all([...new Set(getConfAssemblyNames(config))].map(async (assemblyName) => {\n                    const adapterConfig = readConfObject(config, 'adapter');\n                    return [\n                        assemblyName,\n                        (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                            adapterConfig,\n                            regions: [\n                                {\n                                    assemblyName,\n                                },\n                            ],\n                        })),\n                    ];\n                }));\n                setRefNames(Object.fromEntries(map));\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n        })();\n    }, [config, rpcManager]);\n    const names = refNames ? Object.entries(refNames) : [];\n    const result = names\n        .flatMap(([assemblyName, refNames]) => {\n        return [\n            `--- ${assemblyName} ---`,\n            ...refNames.slice(0, MAX_REF_NAMES),\n            refNames.length > MAX_REF_NAMES\n                ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n                : '',\n        ];\n    })\n        .filter(f => !!f)\n        .join('\\n');\n    return (_jsx(Dialog, { open: true, title: \"Reference sequence names used in track\", onClose: onClose, maxWidth: \"xl\", children: _jsx(DialogContent, { className: classes.container, children: error ? (_jsx(ErrorMessage, { error: error })) : refNames === undefined ? (_jsx(LoadingEllipses, { message: \"Loading refNames\" })) : (_jsxs(_Fragment, { children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                            copy(names\n                                .flatMap(([assemblyName, refNames]) => [\n                                `--- ${assemblyName} ---`,\n                                ...refNames,\n                            ])\n                                .filter(f => !!f)\n                                .join('\\n'));\n                            setCopied(true);\n                            setTimeout(() => {\n                                setCopied(false);\n                            }, 1000);\n                        }, children: copied ? 'Copied to clipboard!' : 'Copy ref names' }), _jsx(\"pre\", { className: classes.refNames, children: result })] })) }) }));\n});\nexport default RefNameInfoDialog;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { getConf, readConfObject } from '@jbrowse/core/configuration';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { Button } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport FileInfoPanel from './FileInfoPanel';\nimport RefNameInfoDialog from './RefNameInfoDialog';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n    button: {\n        float: 'right',\n    },\n});\nfunction removeAttr(obj, attr) {\n    for (const prop in obj) {\n        if (prop === attr) {\n            delete obj[prop];\n        }\n        else if (typeof obj[prop] === 'object') {\n            removeAttr(obj[prop], attr);\n        }\n    }\n    return obj;\n}\nconst AboutDialogContents = observer(function ({ config, }) {\n    const [copied, setCopied] = useState(false);\n    const conf = readConfObject(config);\n    const session = getSession(config);\n    const { classes } = useStyles();\n    const [showRefNames, setShowRefNames] = useState(false);\n    const hideUris = getConf(session, ['formatAbout', 'hideUris']) ||\n        readConfObject(config, ['formatAbout', 'hideUris']);\n    const { pluginManager } = getEnv(session);\n    const confPostExt = pluginManager.evaluateExtensionPoint('Core-customizeAbout', {\n        config: {\n            ...conf,\n            ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n            ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n        },\n    }, { session, config });\n    const ExtraPanel = pluginManager.evaluateExtensionPoint('Core-extraAboutPanel', null, { session, config });\n    return (_jsxs(\"div\", { className: classes.content, children: [_jsxs(BaseCard, { title: \"Configuration\", children: [!hideUris ? (_jsxs(\"span\", { className: classes.button, children: [_jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                                    setShowRefNames(true);\n                                }, children: \"Show ref names\" }), _jsx(Button, { variant: \"contained\", onClick: () => {\n                                    const snap = removeAttr(structuredClone(conf), 'baseUri');\n                                    copy(JSON.stringify(snap, null, 2));\n                                    setCopied(true);\n                                    setTimeout(() => {\n                                        setCopied(false);\n                                    }, 1000);\n                                }, children: copied ? 'Copied to clipboard!' : 'Copy config' })] })) : null, _jsx(Attributes, { attributes: confPostExt.config, omit: ['displays', 'baseUri', 'refNames', 'formatAbout', 'metadata'], hideUris: hideUris })] }), confPostExt.config.metadata ? (_jsx(BaseCard, { title: \"Metadata\", children: _jsx(Attributes, { attributes: confPostExt.config.metadata, omit: ['displays', 'baseUri', 'refNames', 'formatAbout'], hideUris: hideUris }) })) : null, ExtraPanel ? (_jsx(BaseCard, { title: ExtraPanel.name, children: _jsx(ExtraPanel.Component, { config: config }) })) : null, _jsx(FileInfoPanel, { config: config }), showRefNames ? (_jsx(RefNameInfoDialog, { config: config, onClose: () => {\n                    setShowRefNames(false);\n                } })) : null] }));\n});\nexport default AboutDialogContents;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport Dialog from '@jbrowse/core/ui/Dialog';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { getTrackName } from '@jbrowse/core/util/tracks';\nimport AboutContents from './AboutDialogContents';\nexport function AboutDialog({ config, handleClose, }) {\n    const session = getSession(config);\n    const trackName = getTrackName(config, session);\n    const { pluginManager } = getEnv(session);\n    const AboutComponent = pluginManager.evaluateExtensionPoint('Core-replaceAbout', AboutContents, { session, config });\n    return (_jsx(Dialog, { open: true, onClose: handleClose, title: trackName, maxWidth: \"xl\", children: _jsx(AboutComponent, { config: config }) }));\n}\n"],"names":["FileInfoPanel","config","error","setError","useState","info","setInfo","session","getSession","rpcManager","useEffect","adapterConfig","readConfObject","result","e","details","_jsx","BaseCard","ErrorMessage","LoadingEllipses","Attributes","MAX_REF_NAMES","useStyles","makeStyles","theme","RefNameInfoDialog","observer","onClose","classes","refNames","setRefNames","copied","setCopied","map","getConfAssemblyNames","assemblyName","names","f","Dialog","DialogContent","_jsxs","_Fragment","Button","copy","removeAttr","obj","attr","prop","AboutDialogContents","conf","showRefNames","setShowRefNames","hideUris","getConf","pluginManager","getEnv","confPostExt","ExtraPanel","snap","AboutDialog","handleClose","trackName","getTrackName","AboutComponent","AboutContents"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}