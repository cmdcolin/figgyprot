var d=Object.defineProperty;var m=(n,s,t)=>s in n?d(n,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[s]=t;var u=(n,s,t)=>m(n,typeof s!="symbol"?s+"":s,t);import{B as h}from"./index-7uUUtqbY.js";import{ah as g,u as c}from"./index-BXtJZUZx.js";import{r as x}from"./rxjs-B_16j8uU.js";class y extends h.BaseFeatureDataAdapter{constructor(){super(...arguments);u(this,"feats")}async loadDataP(){return(await g.openLocation(this.getConf("location")).readFile("utf8")).split(`
`).slice(1).map(a=>a.trim()).filter(a=>!!a).map((a,e)=>{const[r,o,f]=a.split(","),p=r[0],i=r.at(-1),l=r.slice(1,-1);return{uniqueId:`feat-${e}`,ref:p,variant:i,start:+l,end:+l+1,score:+o,am_class:f}})}async loadData(t={}){return this.feats=this.feats??this.loadDataP().catch(a=>{throw this.feats=void 0,a}),this.feats}async getGlobalStats(t){const a=await this.loadData(),e=c.min(a.map(o=>o.score)),r=c.max(a.map(o=>o.score));return{scoreMin:e,scoreMax:r}}async getMultiRegionFeatureDensityStats(t){return{featureDensity:0}}async getRefNames(t={}){return[]}getFeatures(t,a={}){return x.ObservableCreate(async e=>{const{start:r,end:o,refName:f}=t,p=await this.loadData();for(const i of p)c.doesIntersect2(i.start,i.end,r,o)&&e.next(new c.SimpleFeature({...i,refName:f,source:i.variant}));e.complete()})}async getSources(){const t=new Set,a=await this.loadData();for(const e of a)t.add(e.variant);return[...t].map(e=>({name:e,__name:e}))}freeResources(){}}u(y,"capabilities",["getFeatures","getRefNames"]);export{y as default};
//# sourceMappingURL=AlphaMissensePathogenicityAdapter-DpI9yyz3.js.map
