import{$ as D,u as p,aN as L,aO as W}from"./index-BXtJZUZx.js";import{d as $,f as u,g as z,a as K}from"./drawPhased-BbWusNMo.js";import"./util-Cozj6Xfd.js";async function Z(d,P){const{scrollTop:I,minorAlleleFrequencyFilter:O,sources:x,rowHeight:g,features:R,regions:q,bpPerPx:v,renderingMode:H,stopToken:h,lengthCutoffFilter:N,referenceDrawingMode:C}=P,B=q[0],{statusCallback:S=()=>{}}=P;D.checkStopToken(h);const T=await p.updateStatus("Calculating stats",S,()=>L({stopToken:h,features:R.values(),minorAlleleFrequencyFilter:O,lengthCutoffFilter:N}));D.checkStopToken(h);const k=new W;return await p.updateStatus("Drawing variants",S,()=>{p.forEachWithStopTokenCheck(T,h,({mostFrequentAlt:e,feature:n})=>{const[w,G]=p.featureSpanPx(n,B,v),J=n.get("end")-n.get("start"),c=Math.max(Math.round(G-w),2),F=n.get("genotypes");let s=-I;const b=x.length;if(H==="phased")for(let a=0;a<b;a++){const{name:l,HP:f}=x[a],t=F[l],o=Math.floor(w),i=Math.max(g,1);if(t)if(t.includes("|")){const m=t.split("|");$(m,d,o,s,c,i,f,void 0,C==="draw")&&k.insert({minX:o,maxX:o+c,minY:s,maxY:s+i,genotype:t,name:l,featureId:n.id()})}else d.fillStyle="black",d.fillRect(o-u,s-u,c+u,i+u);s+=g}else{const a={};for(let l=0;l<b;l++){const{name:f}=x[l],t=F[f],o=Math.floor(w),i=Math.max(g,1);if(t){let r=a[t];if(r===void 0){let m=0,A=0,E=0,X=0;const Y=t.split(/[/|]/),j=Y.length;for(let y=0;y<j;y++){const M=Y[y];M===e?m++:M==="0"?X++:M==="."?A++:E++}r=z(X,m,E,A,j,C==="draw"),a[t]=r}r&&(K(r,d,o,s,c,i,n.get("type"),n.get("strand"),J>5?.75:1),k.insert({minX:o,maxX:o+c,minY:s,maxY:s+i,genotype:t,name:f,featureId:n.id()}))}s+=g}}})}),{rbush:k.toJSON(),featureGenotypeMap:Object.fromEntries(T.map(({feature:e})=>[e.id(),{alt:e.get("ALT"),ref:e.get("REF"),name:e.get("name"),description:e.get("description"),length:e.get("end")-e.get("start")}]))}}export{Z as makeImageData};
//# sourceMappingURL=makeImageData-CrfEKcLQ.js.map
