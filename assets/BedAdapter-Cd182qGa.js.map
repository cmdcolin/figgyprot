{"version":3,"file":"BedAdapter-Cd182qGa.js","sources":["../../node_modules/@jbrowse/plugin-bed/esm/BedAdapter/BedAdapter.js"],"sourcesContent":["import IntervalTree from '@flatten-js/interval-tree';\nimport BED from '@gmod/bed';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, fetchAndMaybeUnzip, getProgressDisplayStr, } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { featureData } from '../util';\nclass BedAdapter extends BaseFeatureDataAdapter {\n    constructor() {\n        super(...arguments);\n        this.intervalTrees = {};\n    }\n    async loadDataP(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        const bedLoc = this.getConf('bedLocation');\n        const buffer = await fetchAndMaybeUnzip(openLocation(bedLoc, this.pluginManager), opts);\n        const headerLines = [];\n        const features = {};\n        let blockStart = 0;\n        let i = 0;\n        const decoder = new TextDecoder('utf8');\n        while (blockStart < buffer.length) {\n            const n = buffer.indexOf(10, blockStart);\n            const b = n === -1 ? buffer.subarray(blockStart) : buffer.subarray(blockStart, n);\n            const line = decoder.decode(b).trim();\n            if (line) {\n                if (line.startsWith('#')) {\n                    headerLines.push(line);\n                }\n                else if (line.startsWith('>')) {\n                    break;\n                }\n                else {\n                    const tab = line.indexOf('\\t');\n                    const refName = line.slice(0, tab);\n                    if (!features[refName]) {\n                        features[refName] = [];\n                    }\n                    features[refName].push(line);\n                }\n            }\n            if (i++ % 10000 === 0) {\n                statusCallback(`Loading ${getProgressDisplayStr(blockStart, buffer.length)}`);\n            }\n            blockStart = n + 1;\n        }\n        const header = headerLines.join('\\n');\n        const autoSql = this.getConf('autoSql');\n        const parser = new BED({ autoSql });\n        const columnNames = this.getConf('columnNames');\n        const scoreColumn = this.getConf('scoreColumn');\n        const colRef = this.getConf('colRef');\n        const colStart = this.getConf('colStart');\n        const colEnd = this.getConf('colEnd');\n        return {\n            header,\n            features,\n            parser,\n            columnNames,\n            scoreColumn,\n            colRef,\n            colStart,\n            colEnd,\n        };\n    }\n    async loadData(opts = {}) {\n        if (!this.bedFeatures) {\n            this.bedFeatures = this.loadDataP(opts).catch((e) => {\n                this.bedFeatures = undefined;\n                throw e;\n            });\n        }\n        return this.bedFeatures;\n    }\n    async getRefNames(opts = {}) {\n        const { features } = await this.loadData(opts);\n        return Object.keys(features);\n    }\n    async getHeader(opts = {}) {\n        const { header } = await this.loadData(opts);\n        return header;\n    }\n    async getNames() {\n        const { header, columnNames } = await this.loadData();\n        if (columnNames.length) {\n            return columnNames;\n        }\n        const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const defline = defs.at(-1);\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(field => field.trim())\n            : undefined;\n    }\n    async loadFeatureIntervalTreeHelper(refName) {\n        const { colRef, colStart, colEnd, features, parser, scoreColumn } = await this.loadData();\n        const lines = features[refName];\n        if (!lines) {\n            return undefined;\n        }\n        const names = await this.getNames();\n        const intervalTree = new IntervalTree();\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            const uniqueId = `${this.id}-${refName}-${i}`;\n            const feat = new SimpleFeature(featureData({\n                line,\n                colRef,\n                colStart,\n                colEnd,\n                scoreColumn,\n                parser,\n                uniqueId,\n                names,\n            }));\n            intervalTree.insert([feat.get('start'), feat.get('end')], feat);\n        }\n        return intervalTree;\n    }\n    async loadFeatureIntervalTree(refName) {\n        if (!this.intervalTrees[refName]) {\n            this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(refName).catch((e) => {\n                this.intervalTrees[refName] = undefined;\n                throw e;\n            });\n        }\n        return this.intervalTrees[refName];\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const { start, end, refName } = query;\n            const intervalTree = await this.loadFeatureIntervalTree(refName);\n            const features = intervalTree === null || intervalTree === void 0 ? void 0 : intervalTree.search([start, end]);\n            if (features) {\n                for (const f of features) {\n                    observer.next(f);\n                }\n            }\n            observer.complete();\n        }, opts.stopToken);\n    }\n}\nBedAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default BedAdapter;\n"],"names":["BedAdapter","BaseFeatureDataAdapter","opts","statusCallback","bedLoc","buffer","fetchAndMaybeUnzip","openLocation","headerLines","features","blockStart","i","decoder","n","b","line","tab","refName","getProgressDisplayStr","header","autoSql","parser","BED","columnNames","scoreColumn","colRef","colStart","colEnd","e","defline","f","field","lines","names","intervalTree","IntervalTree","uniqueId","feat","SimpleFeature","featureData","query","ObservableCreate","observer","start","end"],"mappings":"oNAOA,MAAMA,UAAmBC,EAAAA,sBAAuB,CAC5C,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,cAAgB,CAAE,CAC/B,CACI,MAAM,UAAUC,EAAM,CAClB,KAAM,CAAE,eAAAC,EAAiB,IAAM,EAAK,EAAGD,GAAQ,CAAE,EAC3CE,EAAS,KAAK,QAAQ,aAAa,EACnCC,EAAS,MAAMC,EAAAA,mBAAmBC,EAAY,aAACH,EAAQ,KAAK,aAAa,EAAGF,CAAI,EAChFM,EAAc,CAAE,EAChBC,EAAW,CAAE,EACnB,IAAIC,EAAa,EACbC,EAAI,EACR,MAAMC,EAAU,IAAI,YAAY,MAAM,EACtC,KAAOF,EAAaL,EAAO,QAAQ,CAC/B,MAAMQ,EAAIR,EAAO,QAAQ,GAAIK,CAAU,EACjCI,EAAID,IAAM,GAAKR,EAAO,SAASK,CAAU,EAAIL,EAAO,SAASK,EAAYG,CAAC,EAC1EE,EAAOH,EAAQ,OAAOE,CAAC,EAAE,KAAM,EACrC,GAAIC,EACA,GAAIA,EAAK,WAAW,GAAG,EACnBP,EAAY,KAAKO,CAAI,MAEpB,IAAIA,EAAK,WAAW,GAAG,EACxB,MAEC,CACD,MAAMC,EAAMD,EAAK,QAAQ,GAAI,EACvBE,EAAUF,EAAK,MAAM,EAAGC,CAAG,EAC5BP,EAASQ,CAAO,IACjBR,EAASQ,CAAO,EAAI,CAAE,GAE1BR,EAASQ,CAAO,EAAE,KAAKF,CAAI,CAC/C,EAEgBJ,IAAM,MAAU,GAChBR,EAAe,WAAWe,EAAqB,sBAACR,EAAYL,EAAO,MAAM,CAAC,EAAE,EAEhFK,EAAaG,EAAI,CAC7B,CACQ,MAAMM,EAASX,EAAY,KAAK;AAAA,CAAI,EAC9BY,EAAU,KAAK,QAAQ,SAAS,EAChCC,EAAS,IAAIC,EAAI,CAAE,QAAAF,CAAO,CAAE,EAC5BG,EAAc,KAAK,QAAQ,aAAa,EACxCC,EAAc,KAAK,QAAQ,aAAa,EACxCC,EAAS,KAAK,QAAQ,QAAQ,EAC9BC,EAAW,KAAK,QAAQ,UAAU,EAClCC,EAAS,KAAK,QAAQ,QAAQ,EACpC,MAAO,CACH,OAAAR,EACA,SAAAV,EACA,OAAAY,EACA,YAAAE,EACA,YAAAC,EACA,OAAAC,EACA,SAAAC,EACA,OAAAC,CACH,CACT,CACI,MAAM,SAASzB,EAAO,GAAI,CACtB,OAAK,KAAK,cACN,KAAK,YAAc,KAAK,UAAUA,CAAI,EAAE,MAAO0B,GAAM,CACjD,WAAK,YAAc,OACbA,CACtB,CAAa,GAEE,KAAK,WACpB,CACI,MAAM,YAAY1B,EAAO,GAAI,CACzB,KAAM,CAAE,SAAAO,CAAU,EAAG,MAAM,KAAK,SAASP,CAAI,EAC7C,OAAO,OAAO,KAAKO,CAAQ,CACnC,CACI,MAAM,UAAUP,EAAO,GAAI,CACvB,KAAM,CAAE,OAAAiB,CAAQ,EAAG,MAAM,KAAK,SAASjB,CAAI,EAC3C,OAAOiB,CACf,CACI,MAAM,UAAW,CACb,KAAM,CAAE,OAAAA,EAAQ,YAAAI,CAAa,EAAG,MAAM,KAAK,SAAU,EACrD,GAAIA,EAAY,OACZ,OAAOA,EAGX,MAAMM,EADOV,EAAO,MAAM,YAAY,EAAE,OAAOW,GAAK,CAAC,CAACA,CAAC,EAClC,GAAG,EAAE,EAC1B,OAAQD,GAAY,MAAsCA,EAAQ,SAAS,GAAI,EACzEA,EACG,MAAM,CAAC,EACP,MAAM,GAAI,EACV,IAAIE,GAASA,EAAM,KAAM,CAAA,EAC5B,MACd,CACI,MAAM,8BAA8Bd,EAAS,CACzC,KAAM,CAAE,OAAAQ,EAAQ,SAAAC,EAAU,OAAAC,EAAQ,SAAAlB,EAAU,OAAAY,EAAQ,YAAAG,CAAa,EAAG,MAAM,KAAK,SAAU,EACnFQ,EAAQvB,EAASQ,CAAO,EAC9B,GAAI,CAACe,EACD,OAEJ,MAAMC,EAAQ,MAAM,KAAK,SAAU,EAC7BC,EAAe,IAAIC,EACzB,QAASxB,EAAI,EAAGA,EAAIqB,EAAM,OAAQrB,IAAK,CACnC,MAAMI,EAAOiB,EAAMrB,CAAC,EACdyB,EAAW,GAAG,KAAK,EAAE,IAAInB,CAAO,IAAIN,CAAC,GACrC0B,EAAO,IAAIC,EAAa,cAACC,EAAY,CACvC,KAAAxB,EACA,OAAAU,EACA,SAAAC,EACA,OAAAC,EACA,YAAAH,EACA,OAAAH,EACA,SAAAe,EACA,MAAAH,CAChB,CAAa,CAAC,EACFC,EAAa,OAAO,CAACG,EAAK,IAAI,OAAO,EAAGA,EAAK,IAAI,KAAK,CAAC,EAAGA,CAAI,CAC1E,CACQ,OAAOH,CACf,CACI,MAAM,wBAAwBjB,EAAS,CACnC,OAAK,KAAK,cAAcA,CAAO,IAC3B,KAAK,cAAcA,CAAO,EAAI,KAAK,8BAA8BA,CAAO,EAAE,MAAOW,GAAM,CACnF,WAAK,cAAcX,CAAO,EAAI,OACxBW,CACtB,CAAa,GAEE,KAAK,cAAcX,CAAO,CACzC,CACI,YAAYuB,EAAOtC,EAAO,GAAI,CAC1B,OAAOuC,EAAAA,iBAAiB,MAAOC,GAAa,CACxC,KAAM,CAAE,MAAAC,EAAO,IAAAC,EAAK,QAAA3B,CAAS,EAAGuB,EAC1BN,EAAe,MAAM,KAAK,wBAAwBjB,CAAO,EACzDR,EAAWyB,GAAiB,KAAkC,OAASA,EAAa,OAAO,CAACS,EAAOC,CAAG,CAAC,EAC7G,GAAInC,EACA,UAAWqB,KAAKrB,EACZiC,EAAS,KAAKZ,CAAC,EAGvBY,EAAS,SAAU,CAC/B,EAAWxC,EAAK,SAAS,CACzB,CACA,CACAF,EAAW,aAAe,CAAC,cAAe,aAAa","x_google_ignoreList":[0]}