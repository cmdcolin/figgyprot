{"version":3,"file":"PairwiseIndexedPAFAdapter-CgWW2_Dn.js","sources":["../../node_modules/@jbrowse/plugin-comparative-adapters/esm/PairwiseIndexedPAFAdapter/PairwiseIndexedPAFAdapter.js"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport SyntenyFeature from '../SyntenyFeature';\nimport { parsePAFLine } from '../util';\nclass PAFAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const pifGzLoc = this.getConf('pifGzLocation');\n        const type = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const pm = this.pluginManager;\n        this.pif = new TabixIndexedFile({\n            filehandle: openLocation(pifGzLoc, pm),\n            csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n            tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n    }\n    async getHeader() {\n        return this.pif.getHeader();\n    }\n    getAssemblyNames() {\n        const assemblyNames = this.getConf('assemblyNames');\n        if (assemblyNames.length === 0) {\n            return [\n                this.getConf('queryAssembly'),\n                this.getConf('targetAssembly'),\n            ];\n        }\n        return assemblyNames;\n    }\n    async hasDataForRefName() {\n        return true;\n    }\n    async getRefNames(opts = {}) {\n        var _a, _b;\n        const r1 = (_b = (_a = opts.regions) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.assemblyName;\n        if (!r1) {\n            throw new Error('no assembly name provided');\n        }\n        const idx = this.getAssemblyNames().indexOf(r1);\n        const names = await this.pif.getReferenceSequenceNames(opts);\n        if (idx === 0) {\n            return names.filter(n => n.startsWith('q')).map(n => n.slice(1));\n        }\n        else if (idx === 1) {\n            return names.filter(n => n.startsWith('t')).map(n => n.slice(1));\n        }\n        else {\n            return [];\n        }\n    }\n    getFeatures(query, opts = {}) {\n        const { statusCallback = () => { } } = opts;\n        return ObservableCreate(async (observer) => {\n            const { assemblyName } = query;\n            const assemblyNames = this.getAssemblyNames();\n            const index = assemblyNames.indexOf(assemblyName);\n            const flip = index === 0;\n            const letter = flip ? 'q' : 't';\n            await updateStatus('Downloading features', statusCallback, () => this.pif.getLines(letter + query.refName, query.start, query.end, {\n                lineCallback: (line, fileOffset) => {\n                    const r = parsePAFLine(line);\n                    const refName = r.qname.slice(1);\n                    const start = r.qstart;\n                    const end = r.qend;\n                    const mateName = r.tname;\n                    const mateStart = r.tstart;\n                    const mateEnd = r.tend;\n                    const { extra, strand } = r;\n                    const { numMatches = 0, blockLen = 1, cg, ...rest } = extra;\n                    observer.next(new SyntenyFeature({\n                        uniqueId: fileOffset + assemblyName,\n                        assemblyName,\n                        start,\n                        end,\n                        type: 'match',\n                        refName,\n                        strand,\n                        ...rest,\n                        CIGAR: extra.cg,\n                        syntenyId: fileOffset,\n                        identity: numMatches / blockLen,\n                        numMatches,\n                        blockLen,\n                        mate: {\n                            start: mateStart,\n                            end: mateEnd,\n                            refName: mateName,\n                            assemblyName: assemblyNames[+flip],\n                        },\n                    }));\n                },\n                stopToken: opts.stopToken,\n            }));\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\nPAFAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default PAFAdapter;\n"],"names":["PAFAdapter","BaseFeatureDataAdapter","config","getSubAdapter","pluginManager","pifGzLoc","type","loc","pm","TabixIndexedFile","openLocation","assemblyNames","opts","_a","_b","r1","idx","names","n","query","statusCallback","ObservableCreate","observer","assemblyName","flip","letter","updateStatus","line","fileOffset","parsePAFLine","refName","start","end","mateName","mateStart","mateEnd","extra","strand","numMatches","blockLen","cg","rest","SyntenyFeature"],"mappings":"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","x_google_ignoreList":[0]}