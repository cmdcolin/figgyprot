var A=Object.defineProperty;var k=(s,a,e)=>a in s?A(s,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[a]=e;var b=(s,a,e)=>k(s,typeof a!="symbol"?a+"":a,e);import{ca as y}from"./index-CT2bM4yV.js";import{B as x,a as B,p as P,c as U,b as _}from"./BamAdapter-BfstWuM2.js";import"./crc32-BNi2TJ31.js";async function T(s,a){const e=await Promise.all(s.map(async r=>{const{url:t,headers:n}=r;if(t.startsWith("data:")){const c=await fetch(t);if(!c.ok)throw new Error("failed to decode base64");const o=await c.arrayBuffer();return new Uint8Array(o)}else{const{referer:c,...o}=n,i=await fetch(t,{...a,headers:{...a==null?void 0:a.headers,...o}});if(!i.ok)throw new Error(`HTTP ${i.status} fetching ${t}: ${await i.text()}`);return new Uint8Array(await i.arrayBuffer())}}));return U(await Promise.all(e.map(r=>y(r))))}class E extends x{constructor(e){super({htsget:!0});b(this,"baseUrl");b(this,"trackId");this.baseUrl=e.baseUrl,this.trackId=e.trackId}async*streamRecordsForRange(e,r,t,n){var w;const o=`${`${this.baseUrl}/${this.trackId}`}?referenceName=${e}&start=${r}&end=${t}&format=BAM`,i=(w=this.chrToIndex)==null?void 0:w[e];if(i===void 0)yield[];else{const d=await fetch(o,{...n});if(!d.ok)throw new Error(`HTTP ${d.status} fetching ${o}: ${await d.text()}`);const f=await d.json(),u=await T(f.htsget.urls.slice(1),n);yield*this._fetchChunkFeatures([{buffer:u,_fetchedSize:void 0,bin:0,compareTo(){return 0},toUniqueString(){return`${e}_${r}_${t}`},fetchedSize(){return 0},minv:{dataPosition:0,blockPosition:0,compareTo:()=>0},maxv:{dataPosition:Number.MAX_SAFE_INTEGER,blockPosition:0,compareTo:()=>0},toString(){return`${e}_${r}_${t}`}}],i,r,t,n)}}async _readChunk({chunk:e}){if(!e.buffer)throw new Error("expected chunk.buffer in htsget");return{data:e.buffer,cpositions:[],dpositions:[],chunk:e}}async getHeader(e={}){const r=`${this.baseUrl}/${this.trackId}?referenceName=na&class=header`,t=await fetch(r,e);if(!t.ok)throw new Error(`HTTP ${t.status} fetching ${r}: ${await t.text()}`);const n=await t.json(),c=await T(n.htsget.urls,e),o=new DataView(c.buffer);if(o.getInt32(0,!0)!==B)throw new Error("Not a BAM file");const i=o.getInt32(4,!0),d=new TextDecoder("utf8").decode(c.subarray(8,8+i)),f=P(d),u=[],$={},p=f.filter(h=>h.tag==="SQ");for(const[h,I]of p.entries()){let g="",m=0;for(const l of I.data)l.tag==="SN"?g=l.value:l.tag==="LN"&&(m=+l.value);$[g]=h,u[h]={refName:g,length:m}}return this.chrToIndex=$,this.indexToChr=u,f}}class q extends _{async configurePre(){const a=this.getConf("htsgetBase"),e=this.getConf("htsgetTrackId"),r=new E({baseUrl:a,trackId:e}),t=this.getConf("sequenceAdapter");if(t&&this.getSubAdapter){const n=await this.getSubAdapter(t);return{bam:r,sequenceAdapter:n.dataAdapter}}return{bam:r}}}export{q as default};
//# sourceMappingURL=HtsgetBamAdapter-BQmQkV98.js.map
