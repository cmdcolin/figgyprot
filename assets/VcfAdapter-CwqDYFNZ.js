import{I as F}from"./main-BPWpXae6.js";import{V as M,a as T}from"./index-CSgzi_hl.js";import{a_ as x,a$ as v,b0 as b,b1 as C}from"./index-CGKDrrCR.js";class L extends x.BaseFeatureDataAdapter{constructor(){super(...arguments),this.calculatedIntervalTreeMap={}}async getHeader(){const{header:t}=await this.setup();return t}async getMetadata(){const{parser:t}=await this.setup();return t.getMetadata()}async setupP(t){const{statusCallback:n=()=>{}}=t||{},s=v.openLocation(this.getConf("vcfLocation"),this.pluginManager),a=await b.fetchAndMaybeUnzip(s,t),c=[],o={};let e=0;const l=new TextDecoder("utf8");let p=0;for(;e<a.length;){const i=a.indexOf(10,e),h=i===-1?a.subarray(e):a.subarray(e,i),r=l.decode(h).trim();if(r)if(r.startsWith("#"))c.push(r);else{const g=r.indexOf("	"),u=r.slice(0,g);o[u]||(o[u]=[]),o[u].push(r)}p++%1e4===0&&n(`Loading ${b.getProgressDisplayStr(e,a.length)}`),e=i+1}const f=c.join(`
`),d=new M({header:f}),w=Object.fromEntries(Object.entries(o).map(([i,h])=>[i,r=>{if(!this.calculatedIntervalTreeMap[i]){r==null||r("Parsing VCF data");let g=0;const u=new F;for(const y of h){const m=new T({variant:d.parseLine(y),parser:d,id:`${this.id}-${i}-${g++}`});u.insert([m.get("start"),m.get("end")],m)}this.calculatedIntervalTreeMap[i]=u}return this.calculatedIntervalTreeMap[i]}]));return{header:f,parser:d,intervalTreeMap:w}}async setup(){return this.vcfFeatures||(this.vcfFeatures=this.setupP().catch(t=>{throw this.vcfFeatures=void 0,t})),this.vcfFeatures}async getRefNames(t={}){const{intervalTreeMap:n}=await this.setup();return Object.keys(n)}getFeatures(t,n={}){return C(async s=>{var a;try{const{start:c,end:o,refName:e}=t,{intervalTreeMap:l}=await this.setup();for(const p of((a=l[e])===null||a===void 0?void 0:a.call(l,n.statusCallback).search([c,o]))||[])s.next(p);s.complete()}catch(c){s.error(c)}},n.stopToken)}async getSources(){const t=this.getConf("samplesTsvLocation");if(t.uri===""||t.uri==="/path/to/samples.tsv"){const{parser:n}=await this.setup();return n.samples.map(s=>({name:s}))}else{const s=(await v.openLocation(t).readFile("utf8")).split(/\n|\r\n|\r/),a=s[0].split("	"),{parser:c}=await this.setup(),o=new Set(c.samples);return s.slice(1).map(e=>{const l=e.split("	");return{name:l[0],...Object.fromEntries(l.slice(1).map((p,f)=>[a[f+1],p]))}}).filter(e=>o.has(e.name))}}freeResources(){}}L.capabilities=["getFeatures","getRefNames"];export{L as default};
//# sourceMappingURL=VcfAdapter-CwqDYFNZ.js.map
