{"version":3,"file":"MashMapAdapter-DYTftrpF.js","sources":["../../node_modules/@jbrowse/plugin-comparative-adapters/esm/MashMapAdapter/MashMapAdapter.js"],"sourcesContent":["import { fetchAndMaybeUnzip } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport PAFAdapter from '../PAFAdapter/PAFAdapter';\nimport { parseLineByLine } from '../util';\nexport default class MashMapAdapter extends PAFAdapter {\n    async setupPre(opts) {\n        return parseLineByLine(await fetchAndMaybeUnzip(openLocation(this.getConf('outLocation'), this.pluginManager), opts), parseMashMapLine, opts);\n    }\n}\nfunction parseMashMapLine(line) {\n    const fields = line.split(' ');\n    if (fields.length < 9) {\n        throw new Error(`improperly formatted line: ${line}`);\n    }\n    const [qname, , qstart, qend, strand, tname, , tstart, tend, mq] = fields;\n    return {\n        tname: tname,\n        tstart: +tstart,\n        tend: +tend,\n        qname: qname,\n        qstart: +qstart,\n        qend: +qend,\n        strand: strand === '-' ? -1 : 1,\n        extra: {\n            mappingQual: +mq,\n        },\n    };\n}\n"],"names":["MashMapAdapter","PAFAdapter","opts","parseLineByLine","fetchAndMaybeUnzip","openLocation","parseMashMapLine","line","fields","qname","qstart","qend","strand","tname","tstart","tend","mq"],"mappings":"kNAIe,MAAMA,UAAuBC,CAAW,CACnD,MAAM,SAASC,EAAM,CACjB,OAAOC,EAAgB,MAAMC,EAAAA,mBAAmBC,EAAAA,aAAa,KAAK,QAAQ,aAAa,EAAG,KAAK,aAAa,EAAGH,CAAI,EAAGI,EAAkBJ,CAAI,CACpJ,CACA,CACA,SAASI,EAAiBC,EAAM,CAC5B,MAAMC,EAASD,EAAK,MAAM,GAAG,EAC7B,GAAIC,EAAO,OAAS,EAChB,MAAM,IAAI,MAAM,8BAA8BD,CAAI,EAAE,EAExD,KAAM,CAACE,GAASC,EAAQC,EAAMC,EAAQC,EAAK,CAAIC,EAAQC,EAAMC,CAAE,EAAIR,EACnE,MAAO,CACH,MAAOK,EACP,OAAQ,CAACC,EACT,KAAM,CAACC,EACP,MAAON,EACP,OAAQ,CAACC,EACT,KAAM,CAACC,EACP,OAAQC,IAAW,IAAM,GAAK,EAC9B,MAAO,CACH,YAAa,CAACI,CACjB,CACJ,CACL","x_google_ignoreList":[0]}