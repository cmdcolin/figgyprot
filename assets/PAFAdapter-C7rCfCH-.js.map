{"version":3,"file":"PAFAdapter-C7rCfCH-.js","sources":["../../node_modules/@jbrowse/plugin-comparative-adapters/esm/PAFAdapter/util.js","../../node_modules/@jbrowse/plugin-comparative-adapters/esm/PAFAdapter/PAFAdapter.js"],"sourcesContent":["import { zip } from '../util';\nexport function getWeightedMeans(ret) {\n    const scoreMap = {};\n    for (const entry of ret) {\n        const query = entry.qname;\n        const target = entry.tname;\n        const key = `${query}-${target}`;\n        if (!scoreMap[key]) {\n            scoreMap[key] = { quals: [], len: [] };\n        }\n        scoreMap[key].quals.push(entry.extra.mappingQual || 1);\n        scoreMap[key].len.push(entry.extra.blockLen || 1);\n    }\n    const meanScoreMap = Object.fromEntries(Object.entries(scoreMap).map(([key, val]) => {\n        const vals = zip(val.quals, val.len);\n        return [key, weightedMean(vals)];\n    }));\n    for (const entry of ret) {\n        const query = entry.qname;\n        const target = entry.tname;\n        const key = `${query}-${target}`;\n        entry.extra.meanScore = meanScoreMap[key];\n    }\n    let min = 10000;\n    let max = 0;\n    for (const entry of ret) {\n        min = Math.min(entry.extra.meanScore || 0, min);\n        max = Math.max(entry.extra.meanScore || 0, max);\n    }\n    for (const entry of ret) {\n        const b = entry.extra.meanScore || 0;\n        entry.extra.meanScore = (b - min) / (max - min);\n    }\n    return ret;\n}\nfunction weightedMean(tuples) {\n    const [valueSum, weightSum] = tuples.reduce(([valueSum, weightSum], [value, weight]) => [\n        valueSum + value * weight,\n        weightSum + weight,\n    ], [0, 0]);\n    return valueSum / weightSum;\n}\n","import { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { doesIntersect2 } from '@jbrowse/core/util/range';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { MismatchParser } from '@jbrowse/plugin-alignments';\nimport SyntenyFeature from '../SyntenyFeature';\nimport { flipCigar, parseLineByLine, parsePAFLine, swapIndelCigar, } from '../util';\nimport { getWeightedMeans } from './util';\nconst { parseCigar } = MismatchParser;\nclass PAFAdapter extends BaseFeatureDataAdapter {\n    async setup(opts) {\n        if (!this.setupP) {\n            this.setupP = this.setupPre(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async setupPre(opts) {\n        const pm = this.pluginManager;\n        const pafLocation = openLocation(this.getConf('pafLocation'), pm);\n        const buf = await fetchAndMaybeUnzip(pafLocation, opts);\n        return parseLineByLine(buf, parsePAFLine, opts);\n    }\n    async hasDataForRefName() {\n        return true;\n    }\n    getAssemblyNames() {\n        const assemblyNames = this.getConf('assemblyNames');\n        if (assemblyNames.length === 0) {\n            const query = this.getConf('queryAssembly');\n            const target = this.getConf('targetAssembly');\n            return [query, target];\n        }\n        return assemblyNames;\n    }\n    async getRefNames(opts = {}) {\n        var _a;\n        const r1 = (_a = opts.regions) === null || _a === void 0 ? void 0 : _a[0].assemblyName;\n        const feats = await this.setup(opts);\n        const idx = this.getAssemblyNames().indexOf(r1);\n        if (idx !== -1) {\n            const set = new Set();\n            for (const feat of feats) {\n                set.add(idx === 0 ? feat.qname : feat.tname);\n            }\n            return [...set];\n        }\n        console.warn('Unable to do ref renaming on adapter');\n        return [];\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            let pafRecords = await this.setup(opts);\n            const { config } = opts;\n            if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n                pafRecords = getWeightedMeans(pafRecords);\n            }\n            const assemblyNames = this.getAssemblyNames();\n            const { start: qstart, end: qend, refName: qref, assemblyName } = query;\n            const index = assemblyNames.indexOf(assemblyName);\n            const flip = index === 0;\n            if (index === -1) {\n                console.warn(`${assemblyName} not found in this adapter`);\n                observer.complete();\n            }\n            for (let i = 0; i < pafRecords.length; i++) {\n                const r = pafRecords[i];\n                let start = 0;\n                let end = 0;\n                let refName = '';\n                let mateName = '';\n                let mateStart = 0;\n                let mateEnd = 0;\n                if (flip) {\n                    start = r.qstart;\n                    end = r.qend;\n                    refName = r.qname;\n                    mateName = r.tname;\n                    mateStart = r.tstart;\n                    mateEnd = r.tend;\n                }\n                else {\n                    start = r.tstart;\n                    end = r.tend;\n                    refName = r.tname;\n                    mateName = r.qname;\n                    mateStart = r.qstart;\n                    mateEnd = r.qend;\n                }\n                const { extra, strand } = r;\n                if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n                    const { numMatches = 0, blockLen = 1, cg, ...rest } = extra;\n                    let CIGAR = extra.cg;\n                    if (extra.cg) {\n                        if (flip && strand === -1) {\n                            CIGAR = flipCigar(parseCigar(extra.cg)).join('');\n                        }\n                        else if (flip) {\n                            CIGAR = swapIndelCigar(extra.cg);\n                        }\n                    }\n                    observer.next(new SyntenyFeature({\n                        uniqueId: i + assemblyName,\n                        assemblyName,\n                        start,\n                        end,\n                        type: 'match',\n                        refName,\n                        strand,\n                        ...rest,\n                        CIGAR,\n                        syntenyId: i,\n                        identity: numMatches / blockLen,\n                        numMatches,\n                        blockLen,\n                        mate: {\n                            start: mateStart,\n                            end: mateEnd,\n                            refName: mateName,\n                            assemblyName: assemblyNames[+flip],\n                        },\n                    }));\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\nPAFAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default PAFAdapter;\n"],"names":["getWeightedMeans","ret","scoreMap","entry","query","target","key","meanScoreMap","val","vals","zip","weightedMean","min","max","b","tuples","valueSum","weightSum","value","weight","parseCigar","MismatchParser","PAFAdapter","BaseFeatureDataAdapter","opts","e","pm","pafLocation","openLocation","buf","fetchAndMaybeUnzip","parseLineByLine","parsePAFLine","assemblyNames","_a","r1","feats","idx","set","feat","ObservableCreate","observer","pafRecords","config","readConfObject","qstart","qend","qref","assemblyName","index","flip","i","r","start","end","refName","mateName","mateStart","mateEnd","extra","strand","doesIntersect2","numMatches","blockLen","cg","rest","CIGAR","flipCigar","swapIndelCigar","SyntenyFeature"],"mappings":"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","x_google_ignoreList":[0,1]}