{"version":3,"file":"makeImage-DaBPiYHu.js","sources":["../../node_modules/@jbrowse/plugin-alignments/esm/SNPCoverageRenderer/makeImage.js"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration';\nimport { createJBrowseTheme } from '@jbrowse/core/ui';\nimport { bpSpanPx, featureSpanPx } from '@jbrowse/core/util';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { YSCALEBAR_LABEL_OFFSET, getOrigin, getScale, } from '@jbrowse/plugin-wiggle';\nimport { alphaColor } from '../shared/util';\nconst INTERBASE_INDICATOR_WIDTH = 7;\nconst INTERBASE_INDICATOR_HEIGHT = 4.5;\nconst MINIMUM_INTERBASE_INDICATOR_READ_DEPTH = 7;\nconst complementBase = {\n    C: 'G',\n    G: 'C',\n    A: 'T',\n    T: 'A',\n};\nconst fudgeFactor = 0.6;\nexport async function makeImage(ctx, props) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const { features, regions, bpPerPx, colorBy, displayCrossHatches, visibleModifications = {}, scaleOpts, height: unadjustedHeight, theme: configTheme, config: cfg, ticks, stopToken, } = props;\n    const theme = createJBrowseTheme(configTheme);\n    const region = regions[0];\n    const width = (region.end - region.start) / bpPerPx;\n    const offset = YSCALEBAR_LABEL_OFFSET;\n    const height = unadjustedHeight - offset * 2;\n    const opts = { ...scaleOpts, range: [0, height] };\n    const viewScale = getScale(opts);\n    const indicatorViewScale = getScale({\n        ...opts,\n        range: [0, height / 2],\n        scaleType: 'linear',\n    });\n    const originY = getOrigin(scaleOpts.scaleType);\n    const originLinear = getOrigin('linear');\n    const indicatorThreshold = readConfObject(cfg, 'indicatorThreshold');\n    const showInterbaseCounts = readConfObject(cfg, 'showInterbaseCounts');\n    const showArcs = readConfObject(cfg, 'showArcs');\n    const showInterbaseIndicators = readConfObject(cfg, 'showInterbaseIndicators');\n    const toY = (n) => height - (viewScale(n) || 0) + offset;\n    const toHeight = (n) => toY(originY) - toY(n);\n    const toY2 = (n) => height - (indicatorViewScale(n) || 0) + offset;\n    const toHeight2 = (n) => toY2(originLinear) - toY2(n);\n    const { bases, softclip, hardclip, insertion } = theme.palette;\n    const colorMap = {\n        A: bases.A.main,\n        C: bases.C.main,\n        G: bases.G.main,\n        T: bases.T.main,\n        insertion,\n        softclip,\n        hardclip,\n        total: readConfObject(cfg, 'color'),\n        mod_NONE: 'blue',\n        cpg_meth: 'red',\n        cpg_unmeth: 'blue',\n    };\n    const feats = [...features.values()];\n    ctx.fillStyle = colorMap.total;\n    let start = performance.now();\n    for (const feature of feats) {\n        if (feature.get('type') === 'skip') {\n            continue;\n        }\n        const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n        const w = rightPx - leftPx + fudgeFactor;\n        const score = feature.get('score');\n        ctx.fillRect(leftPx, toY(score), w, toHeight(score));\n        if (performance.now() - start > 400) {\n            checkStopToken(stopToken);\n            start = performance.now();\n        }\n    }\n    let prevTotal = 0;\n    const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx : 0;\n    const drawingModifications = colorBy.type === 'modifications';\n    const drawingMethylation = colorBy.type === 'methylation';\n    const isolatedModification = (_a = colorBy.modifications) === null || _a === void 0 ? void 0 : _a.isolatedModification;\n    start = performance.now();\n    for (const feature of feats) {\n        const now = performance.now();\n        if (now - start > 400) {\n            checkStopToken(stopToken);\n        }\n        if (feature.get('type') === 'skip') {\n            continue;\n        }\n        const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n        const snpinfo = feature.get('snpinfo');\n        const w = Math.max(rightPx - leftPx, 1);\n        const score0 = feature.get('score');\n        if (drawingModifications) {\n            let curr = 0;\n            const refbase = (_b = snpinfo.refbase) === null || _b === void 0 ? void 0 : _b.toUpperCase();\n            const { nonmods, mods, snps, ref } = snpinfo;\n            for (const m of Object.keys(nonmods).sort().reverse()) {\n                const mod = visibleModifications[m.replace('nonmod_', '')] ||\n                    visibleModifications[m.replace('mod_', '')];\n                if (!mod) {\n                    console.warn(`${m} not known yet`);\n                    continue;\n                }\n                if (isolatedModification && mod.type !== isolatedModification) {\n                    continue;\n                }\n                const cmp = complementBase[mod.base];\n                const detectable = mod.base === 'N'\n                    ? score0\n                    : (((_c = snps[mod.base]) === null || _c === void 0 ? void 0 : _c.entryDepth) || 0) +\n                        (((_d = snps[cmp]) === null || _d === void 0 ? void 0 : _d.entryDepth) || 0) +\n                        (refbase === mod.base ? ref['1'] : 0) +\n                        (refbase === cmp ? ref['-1'] : 0);\n                const modifiable = mod.base === 'N'\n                    ? score0\n                    : (((_e = snps[mod.base]) === null || _e === void 0 ? void 0 : _e.entryDepth) || 0) +\n                        (((_f = snps[cmp]) === null || _f === void 0 ? void 0 : _f.entryDepth) || 0) +\n                        (refbase === mod.base ? ref.entryDepth : 0) +\n                        (refbase === cmp ? ref.entryDepth : 0);\n                const { entryDepth, avgProbability = 0 } = snpinfo.nonmods[m];\n                const modFraction = (modifiable / score0) * (entryDepth / detectable);\n                const nonModColor = 'blue';\n                const c = alphaColor(nonModColor, avgProbability);\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = c;\n                ctx.fillRect(Math.round(leftPx), bottom - (curr + modFraction * height), w, modFraction * height);\n                curr += modFraction * height;\n            }\n            for (const m of Object.keys(mods).sort().reverse()) {\n                const mod = visibleModifications[m.replace('mod_', '')];\n                if (!mod) {\n                    console.warn(`${m} not known yet`);\n                    continue;\n                }\n                if (isolatedModification && mod.type !== isolatedModification) {\n                    continue;\n                }\n                const cmp = complementBase[mod.base];\n                const detectable = mod.base === 'N'\n                    ? score0\n                    : (((_g = snps[mod.base]) === null || _g === void 0 ? void 0 : _g.entryDepth) || 0) +\n                        (((_h = snps[cmp]) === null || _h === void 0 ? void 0 : _h.entryDepth) || 0) +\n                        (refbase === mod.base ? ref['1'] : 0) +\n                        (refbase === cmp ? ref['-1'] : 0);\n                const modifiable = mod.base === 'N'\n                    ? score0\n                    : (((_j = snps[mod.base]) === null || _j === void 0 ? void 0 : _j.entryDepth) || 0) +\n                        (((_k = snps[cmp]) === null || _k === void 0 ? void 0 : _k.entryDepth) || 0) +\n                        (refbase === mod.base ? ref.entryDepth : 0) +\n                        (refbase === cmp ? ref.entryDepth : 0);\n                const { entryDepth, avgProbability = 0 } = mods[m];\n                const modFraction = (modifiable / score0) * (entryDepth / detectable);\n                const baseColor = mod.color || 'black';\n                const c = alphaColor(baseColor, avgProbability);\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = c;\n                ctx.fillRect(Math.round(leftPx), bottom - (curr + modFraction * height), w, modFraction * height);\n                curr += modFraction * height;\n            }\n        }\n        else if (drawingMethylation) {\n            const { depth, nonmods, mods } = snpinfo;\n            let curr = 0;\n            for (const base of Object.keys(mods).sort().reverse()) {\n                const { entryDepth } = mods[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n            for (const base of Object.keys(nonmods).sort().reverse()) {\n                const { entryDepth } = nonmods[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n        }\n        else {\n            const { depth, snps } = snpinfo;\n            let curr = 0;\n            for (const base of Object.keys(snps).sort().reverse()) {\n                const { entryDepth } = snps[base];\n                const height = toHeight(score0);\n                const bottom = toY(score0) + height;\n                ctx.fillStyle = colorMap[base] || 'black';\n                ctx.fillRect(Math.round(leftPx), bottom - ((entryDepth + curr) / depth) * height, w, (entryDepth / depth) * height);\n                curr += entryDepth;\n            }\n        }\n        const interbaseEvents = Object.keys(snpinfo.noncov);\n        if (showInterbaseCounts) {\n            let curr = 0;\n            for (const base of interbaseEvents) {\n                const { entryDepth } = snpinfo.noncov[base];\n                const r = 0.6;\n                ctx.fillStyle = colorMap[base];\n                ctx.fillRect(leftPx - r + extraHorizontallyFlippedOffset, INTERBASE_INDICATOR_HEIGHT + toHeight2(curr), r * 2, toHeight2(entryDepth));\n                curr += entryDepth;\n            }\n        }\n        if (showInterbaseIndicators) {\n            let accum = 0;\n            let max = 0;\n            let maxBase = '';\n            for (const base of interbaseEvents) {\n                const { entryDepth } = snpinfo.noncov[base];\n                accum += entryDepth;\n                if (entryDepth > max) {\n                    max = entryDepth;\n                    maxBase = base;\n                }\n            }\n            const indicatorComparatorScore = Math.max(score0, prevTotal);\n            if (accum > indicatorComparatorScore * indicatorThreshold &&\n                indicatorComparatorScore > MINIMUM_INTERBASE_INDICATOR_READ_DEPTH) {\n                ctx.fillStyle = colorMap[maxBase];\n                ctx.beginPath();\n                const l = leftPx + extraHorizontallyFlippedOffset;\n                ctx.moveTo(l - INTERBASE_INDICATOR_WIDTH / 2, 0);\n                ctx.lineTo(l + INTERBASE_INDICATOR_WIDTH / 2, 0);\n                ctx.lineTo(l, INTERBASE_INDICATOR_HEIGHT);\n                ctx.fill();\n            }\n        }\n        prevTotal = score0;\n    }\n    if (showArcs) {\n        for (const f of feats) {\n            if (f.get('type') !== 'skip') {\n                continue;\n            }\n            const s = f.get('start');\n            const e = f.get('end');\n            const [left, right] = bpSpanPx(s, e, region, bpPerPx);\n            ctx.beginPath();\n            const effectiveStrand = f.get('effectiveStrand');\n            const pos = 'rgba(255,200,200,0.7)';\n            const neg = 'rgba(200,200,255,0.7)';\n            const neutral = 'rgba(200,200,200,0.7)';\n            if (effectiveStrand === 1) {\n                ctx.strokeStyle = pos;\n            }\n            else if (effectiveStrand === -1) {\n                ctx.strokeStyle = neg;\n            }\n            else {\n                ctx.strokeStyle = neutral;\n            }\n            ctx.lineWidth = Math.log(f.get('score') + 1);\n            ctx.moveTo(left, height - offset * 2);\n            ctx.bezierCurveTo(left, 0, right, 0, right, height - offset * 2);\n            ctx.stroke();\n        }\n    }\n    if (displayCrossHatches) {\n        ctx.lineWidth = 1;\n        ctx.strokeStyle = 'rgba(140,140,140,0.8)';\n        for (const tick of ticks.values) {\n            ctx.beginPath();\n            ctx.moveTo(0, Math.round(toY(tick)));\n            ctx.lineTo(width, Math.round(toY(tick)));\n            ctx.stroke();\n        }\n    }\n}\n"],"names":["INTERBASE_INDICATOR_WIDTH","INTERBASE_INDICATOR_HEIGHT","MINIMUM_INTERBASE_INDICATOR_READ_DEPTH","complementBase","fudgeFactor","makeImage","ctx","props","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","features","regions","bpPerPx","colorBy","displayCrossHatches","visibleModifications","scaleOpts","unadjustedHeight","configTheme","cfg","ticks","stopToken","theme","createJBrowseTheme","region","width","offset","YSCALEBAR_LABEL_OFFSET","height","opts","viewScale","getScale","indicatorViewScale","originY","getOrigin","originLinear","indicatorThreshold","readConfObject","showInterbaseCounts","showArcs","showInterbaseIndicators","toY","n","toHeight","toY2","toHeight2","bases","softclip","hardclip","insertion","colorMap","feats","start","feature","leftPx","rightPx","featureSpanPx","w","score","checkStopToken","prevTotal","extraHorizontallyFlippedOffset","drawingModifications","drawingMethylation","isolatedModification","snpinfo","score0","curr","refbase","nonmods","mods","snps","ref","m","mod","cmp","detectable","modifiable","entryDepth","avgProbability","modFraction","c","alphaColor","bottom","baseColor","depth","base","interbaseEvents","r","accum","max","maxBase","indicatorComparatorScore","l","f","s","e","left","right","bpSpanPx","effectiveStrand","pos","neg","neutral","tick"],"mappings":"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","x_google_ignoreList":[0]}