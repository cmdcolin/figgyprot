{"version":3,"file":"AlphaFoldConfidenceAdapter-B1ozC1wK.js","sources":["../../src/AlphaFoldConfidenceAdapter/AlphaFoldConfidenceAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  Feature,\n  Region,\n  SimpleFeature,\n  doesIntersect2,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nexport default class AlphaFoldConfidenceAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public feats:\n    | Promise<{ uniqueId: string; start: number; end: number; score: number }[]>\n    | undefined\n\n  private async loadDataP() {\n    const scores = JSON.parse(\n      await openLocation(this.getConf('location')).readFile('utf8'),\n    ) as { residueNumber: number[]; confidenceScore: number[] }\n\n    return scores.residueNumber.map((value, idx) => ({\n      uniqueId: `feat-${idx}`,\n      start: value,\n      end: value + 1,\n      score: scores.confidenceScore[idx]!,\n    }))\n  }\n\n  private async loadData(_opts: BaseOptions = {}) {\n    if (!this.feats) {\n      this.feats = this.loadDataP().catch((e: unknown) => {\n        this.feats = undefined\n        throw e\n      })\n    }\n\n    return this.feats\n  }\n\n  public async getRefNames(_opts: BaseOptions = {}) {\n    return []\n  }\n\n  public getFeatures(query: Region, _opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const data = await this.loadData()\n      for (const f of data) {\n        if (doesIntersect2(f.start, f.end, start, end)) {\n          observer.next(new SimpleFeature({ ...f, refName }))\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["AlphaFoldConfidenceAdapter","BaseFeatureDataAdapter","__publicField","scores","openLocation","value","idx","_opts","e","query","ObservableCreate","observer","start","end","refName","data","f","doesIntersect2","SimpleFeature"],"mappings":"mQAaA,MAAqBA,UAAmCC,EAAAA,sBAAuB,CAA/E,kCAGSC,EAAA,cAIP,MAAc,WAAY,CACxB,MAAMC,EAAS,KAAK,MAClB,MAAMC,EAAAA,aAAa,KAAK,QAAQ,UAAU,CAAC,EAAE,SAAS,MAAM,CAC9D,EAEA,OAAOD,EAAO,cAAc,IAAI,CAACE,EAAOC,KAAS,CAC/C,SAAU,QAAQA,CAAG,GACrB,MAAOD,EACP,IAAKA,EAAQ,EACb,MAAOF,EAAO,gBAAgBG,CAAG,CAAA,EACjC,CAAA,CAGJ,MAAc,SAASC,EAAqB,GAAI,CAC1C,OAAC,KAAK,QACR,KAAK,MAAQ,KAAK,UAAA,EAAY,MAAOC,GAAe,CAClD,WAAK,MAAQ,OACPA,CAAA,CACP,GAGI,KAAK,KAAA,CAGd,MAAa,YAAYD,EAAqB,GAAI,CAChD,MAAO,CAAC,CAAA,CAGH,YAAYE,EAAeF,EAAqB,GAAI,CAClD,OAAAG,EAA0B,MAAMC,GAAY,CACjD,KAAM,CAAE,MAAAC,EAAO,IAAAC,EAAK,QAAAC,CAAY,EAAAL,EAC1BM,EAAO,MAAM,KAAK,SAAS,EACjC,UAAWC,KAAKD,EACVE,EAAAA,eAAeD,EAAE,MAAOA,EAAE,IAAKJ,EAAOC,CAAG,GAClCF,EAAA,KAAK,IAAIO,EAAc,cAAA,CAAE,GAAGF,EAAG,QAAAF,CAAA,CAAS,CAAC,EAGtDH,EAAS,SAAS,CAAA,CACnB,CAAA,CAGI,eAAsB,CAAA,CAC/B,CAhDET,EADmBF,EACL,eAAe,CAAC,cAAe,aAAa"}